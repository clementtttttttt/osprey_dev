
test.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c3       	rjmp	.+1572   	; 0x626 <__ctors_end>
       2:	00 00       	nop
       4:	bf c6       	rjmp	.+3454   	; 0xd84 <__vector_1>
       6:	00 00       	nop
       8:	2a c3       	rjmp	.+1620   	; 0x65e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c3       	rjmp	.+1616   	; 0x65e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c3       	rjmp	.+1612   	; 0x65e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c3       	rjmp	.+1608   	; 0x65e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c3       	rjmp	.+1604   	; 0x65e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c3       	rjmp	.+1600   	; 0x65e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c3       	rjmp	.+1596   	; 0x65e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c3       	rjmp	.+1592   	; 0x65e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c3       	rjmp	.+1588   	; 0x65e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__vector_11>
      30:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__vector_12>
      34:	14 c3       	rjmp	.+1576   	; 0x65e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c3       	rjmp	.+1572   	; 0x65e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c3       	rjmp	.+1568   	; 0x65e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c3       	rjmp	.+1564   	; 0x65e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c3       	rjmp	.+1560   	; 0x65e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c3       	rjmp	.+1556   	; 0x65e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c3       	rjmp	.+1552   	; 0x65e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c3       	rjmp	.+1548   	; 0x65e <__bad_interrupt>
	...

00000054 <init_data_2>:
      54:	00 16 19 03 0f 05 32 45 46 04 0e 0d 35 37 0f        ......2EF...57.

00000063 <init_data>:
      63:	00 03 09 08 16 0a 3f 78 4c 09 0a 08 16 1a 0f        ......?xL......

00000072 <osprey_font_bits>:
	...
      7a:	3e 41 55 41 55 49 3e 00 3e 7f 6b 7f 6b 77 3e 00     >AUAUI>.>.k.kw>.
      8a:	36 7f 7f 7f 3e 1c 08 00 08 1c 3e 7f 3e 1c 08 00     6...>.....>.>...
      9a:	08 1c 2a 7f 2a 08 3e 00 08 1c 3e 7f 3e 08 3e 00     ..*.*.>...>.>.>.
      aa:	00 00 00 08 00 00 00 00 7f 7f 7f 77 7f 7f 7f 00     ...........w....
      ba:	00 08 14 14 14 08 00 00 7f 77 6b 6b 6b 77 7f 00     .........wkkkw..
      ca:	70 60 52 0d 05 05 02 00 1c 22 22 1c 08 1c 08 00     p`R......"".....
      da:	18 28 18 08 08 0c 06 00 7c 44 7c 44 44 66 33 00     .(......|D|DDf3.
      ea:	49 2a 1c 77 1c 2a 49 00 03 0f 3f 7f 3f 0f 03 00     I*.w.*I...?.?...
      fa:	60 78 7e 7f 7e 78 60 00 08 1c 3e 08 3e 1c 08 00     `x~.~x`...>.>...
     10a:	36 36 36 36 36 00 36 00 7e 53 5e 50 50 50 50 00     66666.6.~S^PPPP.
     11a:	7e 03 3e 63 3e 60 3f 00 00 00 00 00 7f 7f 7f 00     ~.>c>`?.........
     12a:	08 1c 3e 08 3e 1c 3e 00 08 1c 3e 08 08 08 08 00     ..>.>.>...>.....
     13a:	08 08 08 08 3e 1c 08 00 00 10 30 7f 30 10 00 00     ....>.....0.0...
     14a:	00 04 06 7f 06 04 00 00 00 00 01 01 7f 00 00 00     ................
     15a:	00 14 36 7f 36 14 00 00 08 1c 1c 3e 3e 7f 7f 00     ..6.6......>>...
     16a:	7f 7f 3e 3e 1c 1c 08 00 00 00 00 00 00 00 00 00     ..>>............
     17a:	0c 0c 0c 0c 0c 00 0c 00 14 14 00 00 00 00 00 00     ................
     18a:	36 36 7f 36 7f 36 36 00 14 7e 15 3e 54 3f 14 00     66.6.66..~.>T?..
     19a:	43 63 30 18 0c 66 63 00 1e 33 1e 0f 53 23 5e 00     Cc0..fc..3..S#^.
     1aa:	18 0c 00 00 00 00 00 00 18 0c 06 06 06 0c 18 00     ................
     1ba:	0c 18 30 30 30 18 0c 00 00 2d 1e 3f 1e 2d 00 00     ..000....-.?.-..
     1ca:	00 0c 0c 3f 0c 0c 00 00 00 00 00 00 00 18 0c 00     ...?............
     1da:	00 00 00 3e 00 00 00 00 00 00 00 00 00 18 18 00     ...>............
     1ea:	40 60 30 18 0c 06 03 00 3e 73 7b 6b 6f 67 3e 00     @`0.....>s{kog>.
     1fa:	08 0e 0c 0c 0c 0c 3f 00 3e 63 60 3c 06 63 7f 00     ......?.>c`<.c..
     20a:	3e 63 60 3c 60 63 3e 00 3c 36 33 7f 30 30 30 00     >c`<`c>.<63.000.
     21a:	7f 03 03 3f 60 63 3e 00 3e 63 03 3f 63 63 3e 00     ...?`c>.>c.?cc>.
     22a:	7f 60 30 18 0c 0c 0c 00 3e 63 63 3e 63 63 3e 00     .`0.....>cc>cc>.
     23a:	3e 63 63 7e 60 63 3e 00 00 18 18 00 18 18 00 00     >cc~`c>.........
     24a:	00 18 18 00 18 18 0c 00 60 38 0e 03 0e 38 60 00     ........`8...8`.
     25a:	00 00 7f 00 00 7f 00 00 03 0e 38 60 38 0e 03 00     ..........8`8...
     26a:	3e 63 60 38 0c 00 0c 00 7e 43 73 5b 73 03 7e 00     >c`8....~Cs[s.~.
     27a:	1c 36 63 63 7f 63 63 00 3f 63 63 3f 63 63 3f 00     .6cc.cc.?cc?cc?.
     28a:	3e 63 03 03 03 63 3e 00 3f 63 63 63 63 63 3f 00     >c...c>.?ccccc?.
     29a:	7f 03 03 3f 03 03 7f 00 7f 03 03 3f 03 03 03 00     ...?.......?....
     2aa:	3e 63 03 7b 63 63 3e 00 63 63 63 7f 63 63 63 00     >c.{cc>.ccc.ccc.
     2ba:	1e 0c 0c 0c 0c 0c 1e 00 3c 18 18 18 18 1b 0e 00     ........<.......
     2ca:	63 33 1b 0f 1b 33 63 00 03 03 03 03 03 03 7f 00     c3...3c.........
     2da:	63 77 7f 6b 6b 6b 6b 00 63 67 6f 7b 73 63 63 00     cw.kkkk.cgo{scc.
     2ea:	3e 63 63 63 63 63 3e 00 3f 63 63 3f 03 03 03 00     >ccccc>.?cc?....
     2fa:	1e 33 33 33 33 3b 7e 00 3f 63 63 3f 1b 33 63 00     .3333;~.?cc?.3c.
     30a:	3e 63 03 3e 60 63 3e 00 3f 0c 0c 0c 0c 0c 0c 00     >c.>`c>.?.......
     31a:	63 63 63 63 63 63 3e 00 63 63 36 36 36 1c 08 00     cccccc>.cc666...
     32a:	63 6b 6b 6b 7f 77 63 00 63 36 1c 1c 36 63 63 00     ckkk.wc.c6..6cc.
     33a:	33 33 33 1e 0c 0c 0c 00 7f 60 30 18 0c 06 7f 00     333......`0.....
     34a:	3e 06 06 06 06 06 3e 00 03 06 0c 18 30 60 40 00     >.....>.....0`@.
     35a:	3e 30 30 30 30 30 3e 00 08 1c 36 00 00 00 00 00     >00000>...6.....
     36a:	00 00 00 00 00 00 7f 00 0c 18 00 00 00 00 00 00     ................
     37a:	00 3e 60 7e 63 63 7e 00 03 03 3f 63 63 63 3f 00     .>`~cc~...?ccc?.
     38a:	00 3e 63 03 03 63 3e 00 60 60 7e 63 63 63 7e 00     .>c..c>.``~ccc~.
     39a:	00 3e 63 7f 03 63 3e 00 38 0c 3f 0c 0c 0c 0c 00     .>c..c>.8.?.....
     3aa:	00 7e 63 7e 60 63 3e 00 03 03 3f 63 63 63 63 00     .~c~`c>...?cccc.
     3ba:	00 0c 00 0c 0c 0c 0c 00 00 30 00 30 30 36 1c 00     .........0.006..
     3ca:	03 33 1b 0f 1b 33 63 00 0c 0c 0c 0c 0c 0c 18 00     .3...3c.........
     3da:	00 3f 6b 6b 6b 6b 6b 00 00 3f 63 63 63 63 63 00     .?kkkkk..?ccccc.
     3ea:	00 3e 63 63 63 63 3e 00 00 3f 63 63 3f 03 03 00     .>cccc>..?cc?...
     3fa:	00 7e 63 63 7e 60 60 00 00 3f 63 03 03 03 03 00     .~cc~``..?c.....
     40a:	00 7e 03 3e 60 63 3e 00 0c 0c 3f 0c 0c 6c 38 00     .~.>`c>...?..l8.
     41a:	00 63 63 63 63 63 7e 00 00 63 63 36 36 36 1c 00     .ccccc~..cc666..
     42a:	00 63 63 6b 7f 77 63 00 00 63 36 1c 1c 36 63 00     .cck.wc..c6..6c.
     43a:	00 63 63 7e 60 60 3f 00 00 7f 30 18 0c 06 7f 00     .cc~``?...0.....
     44a:	38 0c 0c 06 0c 0c 38 00 0c 0c 0c 00 0c 0c 0c 00     8.....8.........
     45a:	0e 18 18 30 18 18 0e 00 06 49 30 00 00 00 00 00     ...0.....I0.....
     46a:	08 1c 36 63 63 63 7f 00 7e 03 03 7e 18 30 1c 00     ..6ccc..~..~.0..
     47a:	63 00 63 63 63 63 7e 00 18 0c 3e 63 3f 03 7e 00     c.cccc~...>c?.~.
     48a:	08 14 3e 60 7e 63 7e 00 36 00 3e 60 7e 63 7e 00     ..>`~c~.6.>`~c~.
     49a:	0c 18 3e 60 7e 63 7e 00 1c 1c 3e 60 7e 63 7e 00     ..>`~c~...>`~c~.
     4aa:	00 7e 03 7e 18 30 1c 00 08 14 3e 63 3f 03 7e 00     .~.~.0....>c?.~.
     4ba:	36 00 3e 63 3f 03 7e 00 0c 30 3e 63 3f 03 7e 00     6.>c?.~..0>c?.~.
     4ca:	33 00 0c 0c 0c 0c 0c 00 0c 12 00 0c 0c 0c 0c 00     3...............
     4da:	0c 12 00 0c 0c 0c 0c 00 06 18 00 0c 0c 0c 0c 00     ................
     4ea:	36 00 08 14 3e 22 22 00 08 14 08 1c 3e 22 22 00     6...>"".....>"".
     4fa:	18 0c 7f 01 3f 01 7f 00 00 3f 4c 3e 0d 0d 7e 00     ....?....?L>..~.
     50a:	7e 1b 19 7f 19 19 79 00 7e 1b 19 7f 19 19 79 00     ~.....y.~.....y.

0000051a <_shifted>:
     51a:	0e 60 15 51 16 21 1a 5a 1b 53 1c 41 1d 57 1e 40     .`.Q.!.Z.S.A.W.@
     52a:	21 43 22 58 23 44 24 45 25 24 26 23 29 20 2a 56     !C"X#D$E%$&#) *V
     53a:	2b 46 2c 54 2d 52 2e 25 31 4e 32 42 33 48 34 47     +F,T-R.%1N2B3H4G
     54a:	35 59 36 5e 39 4c 3a 4d 3b 4a 3c 55 3d 26 3e 2a     5Y6^9L:M;J<U=&>*
     55a:	41 3c 42 4b 43 49 44 4f 45 29 46 28 49 3e 4a 3f     A<BKCIDOE)F(I>J?
     56a:	4b 4c 4c 3a 4d 50 4e 5f 52 22 54 7b 55 2b 5a 0d     KLL:MPN_R"T{U+Z.
     57a:	5b 7d 5d 7c 61 3e 66 08 69 31 6b 34 6c 37 70 30     [}]|a>f.i1k4l7p0
     58a:	71 2c 72 32 73 35 74 36 75 38 79 2b 7a 33 7b 2d     q,r2s5t6u8y+z3{-
     59a:	7c 2a 7d 39 00 00                                   |*}9..

000005a0 <_unshifted>:
     5a0:	0e 60 15 71 16 31 1a 7a 1b 73 1c 61 1d 77 1e 32     .`.q.1.z.s.a.w.2
     5b0:	21 63 22 78 23 64 24 65 25 34 26 33 29 20 2a 76     !c"x#d$e%4&3) *v
     5c0:	2b 66 2c 74 2d 72 2e 35 31 6e 32 62 33 68 34 67     +f,t-r.51n2b3h4g
     5d0:	35 79 36 36 39 2c 3a 6d 3b 6a 3c 75 3d 37 3e 38     5y669,:m;j<u=7>8
     5e0:	41 2c 42 6b 43 69 44 6f 45 30 46 39 49 2e 4a 2f     A,BkCiDoE0F9I.J/
     5f0:	4b 6c 4c 3b 4d 70 4e 2d 52 60 54 5b 55 3d 5a 0d     KlL;MpN-R`T[U=Z.
     600:	5b 5d 5d 2f 61 3c 66 08 69 31 6b 34 6c 37 70 30     []]/a<f.i1k4l7p0
     610:	71 2c 72 32 73 35 74 36 75 38 79 2b 7a 33 7b 2d     q,r2s5t6u8y+z3{-
     620:	7c 2a 7d 39 00 00                                   |*}9..

00000626 <__ctors_end>:
     626:	11 24       	eor	r1, r1
     628:	1f be       	out	0x3f, r1	; 63
     62a:	cf e5       	ldi	r28, 0x5F	; 95
     62c:	d4 e0       	ldi	r29, 0x04	; 4
     62e:	de bf       	out	0x3e, r29	; 62
     630:	cd bf       	out	0x3d, r28	; 61

00000632 <__do_copy_data>:
     632:	12 e0       	ldi	r17, 0x02	; 2

00000634 <.Loc.1>:
     634:	a0 e6       	ldi	r26, 0x60	; 96

00000636 <.Loc.2>:
     636:	b0 e0       	ldi	r27, 0x00	; 0

00000638 <.Loc.3>:
     638:	ec ea       	ldi	r30, 0xAC	; 172

0000063a <.Loc.4>:
     63a:	fc e1       	ldi	r31, 0x1C	; 28

0000063c <.Loc.5>:
     63c:	02 c0       	rjmp	.+4      	; 0x642 <.L__do_copy_data_start>

0000063e <.L__do_copy_data_loop>:
     63e:	05 90       	lpm	r0, Z+

00000640 <.Loc.7>:
     640:	0d 92       	st	X+, r0

00000642 <.L__do_copy_data_start>:
     642:	aa 3d       	cpi	r26, 0xDA	; 218

00000644 <.Loc.9>:
     644:	b1 07       	cpc	r27, r17

00000646 <.Loc.10>:
     646:	d9 f7       	brne	.-10     	; 0x63e <.L__do_copy_data_loop>

00000648 <__do_clear_bss>:
     648:	23 e0       	ldi	r18, 0x03	; 3

0000064a <.Loc.1>:
     64a:	aa ed       	ldi	r26, 0xDA	; 218

0000064c <.Loc.2>:
     64c:	b2 e0       	ldi	r27, 0x02	; 2

0000064e <.Loc.3>:
     64e:	01 c0       	rjmp	.+2      	; 0x652 <.Loc.5>

00000650 <.Loc.4>:
     650:	1d 92       	st	X+, r1

00000652 <.Loc.5>:
     652:	a1 3e       	cpi	r26, 0xE1	; 225

00000654 <.Loc.6>:
     654:	b2 07       	cpc	r27, r18

00000656 <.Loc.7>:
     656:	e1 f7       	brne	.-8      	; 0x650 <.Loc.4>

00000658 <L0^A>:
     658:	09 d4       	rcall	.+2066   	; 0xe6c <main>
     65a:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <_exit>

0000065e <__bad_interrupt>:
     65e:	d0 cc       	rjmp	.-1632   	; 0x0 <__vectors>

00000660 <screen_convert_3bit_color_to_24>:
	raw[0] = (raw[0] * 255) / 31;
	
	return ret;
}

static inline screen_24bit_colors_t screen_convert_3bit_color_to_24(screen_3bit_colors_t in){
     660:	98 2f       	mov	r25, r24

00000662 <.LVL1>:
	screen_24bit_colors_t ret = 0;
	uint8_t *restrict raw = (uint8_t *restrict)&ret;
	
	raw[2] = (in&0b100)?0xff:0;
     662:	84 70       	andi	r24, 0x04	; 4

00000664 <.Loc.5>:
     664:	92 fd       	sbrc	r25, 2

00000666 <.Loc.6>:
     666:	8f ef       	ldi	r24, 0xFF	; 255

00000668 <.Loc.7>:
	raw[1] = (in&0b10)?0xff:0;
     668:	79 2f       	mov	r23, r25
     66a:	72 70       	andi	r23, 0x02	; 2

0000066c <.Loc.8>:
     66c:	91 fd       	sbrc	r25, 1

0000066e <.Loc.9>:
     66e:	7f ef       	ldi	r23, 0xFF	; 255

00000670 <.Loc.10>:
	raw[0] = (in&0b1)?0xff:0;
     670:	69 2f       	mov	r22, r25
     672:	61 70       	andi	r22, 0x01	; 1

00000674 <.Loc.11>:
     674:	90 fd       	sbrc	r25, 0

00000676 <.Loc.12>:
     676:	6f ef       	ldi	r22, 0xFF	; 255

00000678 <.Loc.13>:


	
	return ret;
}
     678:	90 e0       	ldi	r25, 0x00	; 0

0000067a <.Loc.15>:
     67a:	08 95       	ret

0000067c <write24BitColor>:
SPDR = cData;
     67c:	8f b9       	out	0x0f, r24	; 15

0000067e <.L6>:
while(!(SPSR & _BV(SPIF)));
     67e:	77 9b       	sbis	0x0e, 7	; 14
     680:	fe cf       	rjmp	.-4      	; 0x67e <.L6>

00000682 <.LBB93>:
SPDR = cData;
     682:	7f b9       	out	0x0f, r23	; 15

00000684 <.L7>:
while(!(SPSR & _BV(SPIF)));
     684:	77 9b       	sbis	0x0e, 7	; 14
     686:	fe cf       	rjmp	.-4      	; 0x684 <.L7>

00000688 <.LBB95>:
SPDR = cData;
     688:	6f b9       	out	0x0f, r22	; 15

0000068a <.L8>:
while(!(SPSR & _BV(SPIF)));
     68a:	77 9b       	sbis	0x0e, 7	; 14
     68c:	fe cf       	rjmp	.-4      	; 0x68a <.L8>

0000068e <.LBE95>:

  screen_write(raw[2]);
  screen_write(raw[1]);
  screen_write(raw[0]);
  // #endif
}
     68e:	08 95       	ret

00000690 <ack_6522>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     690:	80 ea       	ldi	r24, 0xA0	; 160

00000692 <.L1^B1>:
     692:	8a 95       	dec	r24
     694:	f1 f7       	brne	.-4      	; 0x692 <.L1^B1>

00000696 <.LBE97>:
    PORTD &= ~VIA1_CA1;
     696:	82 b3       	in	r24, 0x12	; 18
     698:	8f 7e       	andi	r24, 0xEF	; 239
     69a:	82 bb       	out	0x12, r24	; 18

0000069c <.LBB99>:
     69c:	80 ea       	ldi	r24, 0xA0	; 160

0000069e <.L1^B2>:
     69e:	8a 95       	dec	r24
     6a0:	f1 f7       	brne	.-4      	; 0x69e <.L1^B2>

000006a2 <.LBE99>:
    PORTD |= VIA1_CA1;
     6a2:	82 b3       	in	r24, 0x12	; 18

000006a4 <.Loc.61>:
     6a4:	80 61       	ori	r24, 0x10	; 16
     6a6:	82 bb       	out	0x12, r24	; 18

000006a8 <.LBB101>:
     6a8:	80 ea       	ldi	r24, 0xA0	; 160

000006aa <.L1^B3>:
     6aa:	8a 95       	dec	r24
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <.L1^B3>

000006ae <.LBE101>:
}
     6ae:	08 95       	ret

000006b0 <writedata>:
	PORTB |= LCD_DC;
     6b0:	98 b3       	in	r25, 0x18	; 24

000006b2 <.Loc.74>:
     6b2:	98 60       	ori	r25, 0x08	; 8
     6b4:	98 bb       	out	0x18, r25	; 24

000006b6 <.Loc.75>:
	PORTB &= ~(LCD_CS);
     6b6:	98 b3       	in	r25, 0x18	; 24
     6b8:	9f 7e       	andi	r25, 0xEF	; 239
     6ba:	98 bb       	out	0x18, r25	; 24

000006bc <.LBB103>:
SPDR = cData;
     6bc:	8f b9       	out	0x0f, r24	; 15

000006be <.L11>:
while(!(SPSR & _BV(SPIF)));
     6be:	77 9b       	sbis	0x0e, 7	; 14
     6c0:	fe cf       	rjmp	.-4      	; 0x6be <.L11>

000006c2 <.LBE103>:
	PORTB |= LCD_CS;
     6c2:	88 b3       	in	r24, 0x18	; 24

000006c4 <.Loc.85>:
     6c4:	80 61       	ori	r24, 0x10	; 16
     6c6:	88 bb       	out	0x18, r24	; 24

000006c8 <.Loc.86>:
}
     6c8:	08 95       	ret

000006ca <writecommand>:
	PORTB &= ~LCD_DC;
     6ca:	98 b3       	in	r25, 0x18	; 24
     6cc:	97 7f       	andi	r25, 0xF7	; 247
     6ce:	98 bb       	out	0x18, r25	; 24

000006d0 <.Loc.90>:
	PORTB &= ~LCD_CS;
     6d0:	98 b3       	in	r25, 0x18	; 24
     6d2:	9f 7e       	andi	r25, 0xEF	; 239
     6d4:	98 bb       	out	0x18, r25	; 24

000006d6 <.LBB105>:
SPDR = cData;
     6d6:	8f b9       	out	0x0f, r24	; 15

000006d8 <.L13>:
while(!(SPSR & _BV(SPIF)));
     6d8:	77 9b       	sbis	0x0e, 7	; 14
     6da:	fe cf       	rjmp	.-4      	; 0x6d8 <.L13>

000006dc <.LBE105>:
	PORTB |= LCD_CS;
     6dc:	88 b3       	in	r24, 0x18	; 24

000006de <.Loc.100>:
     6de:	80 61       	ori	r24, 0x10	; 16
     6e0:	88 bb       	out	0x18, r24	; 24

000006e2 <.Loc.101>:
}
     6e2:	08 95       	ret

000006e4 <writecmddata_p>:
void writecmddata_p(uint8_t c, const uint8_t *restrict d, size_t cnt){
     6e4:	a6 2f       	mov	r26, r22
     6e6:	b7 2f       	mov	r27, r23
     6e8:	24 2f       	mov	r18, r20
     6ea:	35 2f       	mov	r19, r21

000006ec <.Loc.104>:
	PORTB &= ~LCD_DC;
     6ec:	98 b3       	in	r25, 0x18	; 24
     6ee:	97 7f       	andi	r25, 0xF7	; 247
     6f0:	98 bb       	out	0x18, r25	; 24

000006f2 <.Loc.106>:
	PORTB &= ~LCD_CS;
     6f2:	98 b3       	in	r25, 0x18	; 24
     6f4:	9f 7e       	andi	r25, 0xEF	; 239
     6f6:	98 bb       	out	0x18, r25	; 24

000006f8 <.LBB107>:
SPDR = cData;
     6f8:	8f b9       	out	0x0f, r24	; 15

000006fa <.L15>:
while(!(SPSR & _BV(SPIF)));
     6fa:	77 9b       	sbis	0x0e, 7	; 14
     6fc:	fe cf       	rjmp	.-4      	; 0x6fa <.L15>

000006fe <.LBE107>:
	PORTB |= LCD_DC;
     6fe:	88 b3       	in	r24, 0x18	; 24

00000700 <.Loc.116>:
     700:	88 60       	ori	r24, 0x08	; 8
     702:	88 bb       	out	0x18, r24	; 24

00000704 <.LBB109>:
	for(size_t i=0;i<cnt;++i){
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0

00000708 <.Loc.120>:
     708:	08 c0       	rjmp	.+16     	; 0x71a <.L16>

0000070a <.L18>:
		screen_write(pgm_read_byte(&d[i]));
     70a:	fd 01       	movw	r30, r26
     70c:	e8 0f       	add	r30, r24
     70e:	f9 1f       	adc	r31, r25

00000710 <.LVL29>:
     710:	e4 91       	lpm	r30, Z

00000712 <.LBB111>:
SPDR = cData;
     712:	ef b9       	out	0x0f, r30	; 15

00000714 <.L17>:
while(!(SPSR & _BV(SPIF)));
     714:	77 9b       	sbis	0x0e, 7	; 14
     716:	fe cf       	rjmp	.-4      	; 0x714 <.L17>

00000718 <.LBE111>:
	for(size_t i=0;i<cnt;++i){
     718:	01 96       	adiw	r24, 0x01	; 1

0000071a <.L16>:
     71a:	82 17       	cp	r24, r18
     71c:	93 07       	cpc	r25, r19
     71e:	a8 f3       	brcs	.-22     	; 0x70a <.L18>

00000720 <.LBE109>:
	PORTB |= LCD_CS;
     720:	88 b3       	in	r24, 0x18	; 24

00000722 <.Loc.136>:
     722:	80 61       	ori	r24, 0x10	; 16
     724:	88 bb       	out	0x18, r24	; 24

00000726 <.Loc.137>:
}
     726:	08 95       	ret

00000728 <writecmddata_s>:
	PORTB &= ~LCD_DC;
     728:	98 b3       	in	r25, 0x18	; 24
     72a:	97 7f       	andi	r25, 0xF7	; 247
     72c:	98 bb       	out	0x18, r25	; 24

0000072e <.Loc.141>:
	PORTB &= ~LCD_CS;
     72e:	98 b3       	in	r25, 0x18	; 24
     730:	9f 7e       	andi	r25, 0xEF	; 239
     732:	98 bb       	out	0x18, r25	; 24

00000734 <.LBB113>:
SPDR = cData;
     734:	8f b9       	out	0x0f, r24	; 15

00000736 <.L20>:
while(!(SPSR & _BV(SPIF)));
     736:	77 9b       	sbis	0x0e, 7	; 14
     738:	fe cf       	rjmp	.-4      	; 0x736 <.L20>

0000073a <.LBE113>:
	PORTB |= LCD_DC;
     73a:	88 b3       	in	r24, 0x18	; 24

0000073c <.Loc.151>:
     73c:	88 60       	ori	r24, 0x08	; 8
     73e:	88 bb       	out	0x18, r24	; 24

00000740 <.LBB115>:
SPDR = cData;
     740:	6f b9       	out	0x0f, r22	; 15

00000742 <.L21>:
while(!(SPSR & _BV(SPIF)));
     742:	77 9b       	sbis	0x0e, 7	; 14
     744:	fe cf       	rjmp	.-4      	; 0x742 <.L21>

00000746 <.LBE115>:
	PORTB |= LCD_CS;
     746:	88 b3       	in	r24, 0x18	; 24

00000748 <.Loc.160>:
     748:	80 61       	ori	r24, 0x10	; 16
     74a:	88 bb       	out	0x18, r24	; 24

0000074c <.Loc.161>:
}
     74c:	08 95       	ret

0000074e <writecmddata>:
void writecmddata(uint8_t c, const uint8_t *restrict d, size_t cnt){
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	c6 2f       	mov	r28, r22
     754:	d7 2f       	mov	r29, r23
     756:	a4 2f       	mov	r26, r20
     758:	b5 2f       	mov	r27, r21

0000075a <.Loc.164>:
	PORTB &= ~LCD_DC;
     75a:	98 b3       	in	r25, 0x18	; 24
     75c:	97 7f       	andi	r25, 0xF7	; 247
     75e:	98 bb       	out	0x18, r25	; 24

00000760 <.Loc.166>:
	PORTB &= ~LCD_CS;
     760:	98 b3       	in	r25, 0x18	; 24
     762:	9f 7e       	andi	r25, 0xEF	; 239
     764:	98 bb       	out	0x18, r25	; 24

00000766 <.LBB117>:
SPDR = cData;
     766:	8f b9       	out	0x0f, r24	; 15

00000768 <.L23>:
while(!(SPSR & _BV(SPIF)));
     768:	77 9b       	sbis	0x0e, 7	; 14
     76a:	fe cf       	rjmp	.-4      	; 0x768 <.L23>

0000076c <.LBE117>:
	PORTB |= LCD_DC;
     76c:	88 b3       	in	r24, 0x18	; 24

0000076e <.Loc.176>:
     76e:	88 60       	ori	r24, 0x08	; 8
     770:	88 bb       	out	0x18, r24	; 24

00000772 <.LBB119>:
	for(size_t i=0;i<cnt;++i){
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0

00000776 <.Loc.180>:
     776:	08 c0       	rjmp	.+16     	; 0x788 <.L24>

00000778 <.L26>:
		screen_write(d[i]);
     778:	fe 01       	movw	r30, r28
     77a:	e8 0f       	add	r30, r24
     77c:	f9 1f       	adc	r31, r25

0000077e <.Loc.183>:
     77e:	20 81       	ld	r18, Z

00000780 <.LBB120>:
SPDR = cData;
     780:	2f b9       	out	0x0f, r18	; 15

00000782 <.L25>:
while(!(SPSR & _BV(SPIF)));
     782:	77 9b       	sbis	0x0e, 7	; 14
     784:	fe cf       	rjmp	.-4      	; 0x782 <.L25>

00000786 <.LBE120>:
	for(size_t i=0;i<cnt;++i){
     786:	01 96       	adiw	r24, 0x01	; 1

00000788 <.L24>:
     788:	8a 17       	cp	r24, r26
     78a:	9b 07       	cpc	r25, r27
     78c:	a8 f3       	brcs	.-22     	; 0x778 <.L26>

0000078e <.LBE119>:
	PORTB |= LCD_CS;
     78e:	88 b3       	in	r24, 0x18	; 24

00000790 <.Loc.193>:
     790:	80 61       	ori	r24, 0x10	; 16
     792:	88 bb       	out	0x18, r24	; 24

00000794 <.Loc.194>:
}
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <screen_init>:
{
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <L0^A>

000007a0 <L0^A>:
     7a0:	00 d0       	rcall	.+0      	; 0x7a2 <L0^A>

000007a2 <L0^A>:
     7a2:	00 d0       	rcall	.+0      	; 0x7a4 <L0^A>

000007a4 <L0^A>:
     7a4:	0f 92       	push	r0
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62

000007aa <.Loc.196>:
	DDRB = (1<< DDB5)|(1<< DDB7) | LCD_DC | LCD_CS | LCD_CLK | LCD_RST;
     7aa:	8c eb       	ldi	r24, 0xBC	; 188
     7ac:	87 bb       	out	0x17, r24	; 23

000007ae <.Loc.198>:
	PORTB = LCD_CS ;
     7ae:	80 e1       	ldi	r24, 0x10	; 16
     7b0:	88 bb       	out	0x18, r24	; 24

000007b2 <.Loc.200>:
	SPCR = (1<< SPE)|(1<< MSTR) ;
     7b2:	80 e5       	ldi	r24, 0x50	; 80
     7b4:	8d b9       	out	0x0d, r24	; 13

000007b6 <.Loc.202>:
	SPSR |= 1<<SPI2X; //DOUBLE THE SPEED
     7b6:	8e b1       	in	r24, 0x0e	; 14

000007b8 <.Loc.203>:
     7b8:	81 60       	ori	r24, 0x01	; 1
     7ba:	8e b9       	out	0x0e, r24	; 14

000007bc <.Loc.204>:
	PORTB |= LCD_RST;
     7bc:	88 b3       	in	r24, 0x18	; 24

000007be <.Loc.205>:
     7be:	84 60       	ori	r24, 0x04	; 4
     7c0:	88 bb       	out	0x18, r24	; 24

000007c2 <.LBB122>:
	__builtin_avr_delay_cycles(__ticks_dc);
     7c2:	8f e1       	ldi	r24, 0x1F	; 31
     7c4:	9e e4       	ldi	r25, 0x4E	; 78

000007c6 <.L1^B4>:
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <.L1^B4>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <L0^A>

000007cc <L0^A>:
	...

000007ce <.LBE122>:
		PORTB &= ~(LCD_RST);
     7ce:	88 b3       	in	r24, 0x18	; 24
     7d0:	8b 7f       	andi	r24, 0xFB	; 251
     7d2:	88 bb       	out	0x18, r24	; 24

000007d4 <.LBB124>:
     7d4:	9f ef       	ldi	r25, 0xFF	; 255
     7d6:	29 ef       	ldi	r18, 0xF9	; 249
     7d8:	80 e0       	ldi	r24, 0x00	; 0

000007da <.L1^B5>:
     7da:	91 50       	subi	r25, 0x01	; 1
     7dc:	20 40       	sbci	r18, 0x00	; 0
     7de:	80 40       	sbci	r24, 0x00	; 0
     7e0:	e1 f7       	brne	.-8      	; 0x7da <.L1^B5>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <L0^A>

000007e4 <L0^A>:
	...

000007e6 <.LBE124>:
	PORTB |= LCD_RST;
     7e6:	88 b3       	in	r24, 0x18	; 24

000007e8 <.Loc.227>:
     7e8:	84 60       	ori	r24, 0x04	; 4
     7ea:	88 bb       	out	0x18, r24	; 24

000007ec <.LBB126>:
     7ec:	9f ef       	ldi	r25, 0xFF	; 255
     7ee:	22 e5       	ldi	r18, 0x52	; 82
     7f0:	87 e0       	ldi	r24, 0x07	; 7

000007f2 <.L1^B6>:
     7f2:	91 50       	subi	r25, 0x01	; 1
     7f4:	20 40       	sbci	r18, 0x00	; 0
     7f6:	80 40       	sbci	r24, 0x00	; 0
     7f8:	e1 f7       	brne	.-8      	; 0x7f2 <.L1^B6>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <L0^A>

000007fc <L0^A>:
	...

000007fe <.LBE126>:
	writecmddata_p(0xe0, init_data, sizeof(init_data));
     7fe:	4f e0       	ldi	r20, 0x0F	; 15
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	63 e6       	ldi	r22, 0x63	; 99
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	80 ee       	ldi	r24, 0xE0	; 224
     808:	6d df       	rcall	.-294    	; 0x6e4 <writecmddata_p>

0000080a <.LVL56>:
	writecmddata_p(0xe1, init_data_2, sizeof(init_data_2));
     80a:	4f e0       	ldi	r20, 0x0F	; 15
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	64 e5       	ldi	r22, 0x54	; 84
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	81 ee       	ldi	r24, 0xE1	; 225
     814:	67 df       	rcall	.-306    	; 0x6e4 <writecmddata_p>

00000816 <.LVL57>:
	writecommand(0XC0);      //Power Control 1
     816:	80 ec       	ldi	r24, 0xC0	; 192
     818:	58 df       	rcall	.-336    	; 0x6ca <writecommand>

0000081a <.LVL58>:
	writedata(0x17);    //Vreg1out
     81a:	87 e1       	ldi	r24, 0x17	; 23
     81c:	49 df       	rcall	.-366    	; 0x6b0 <writedata>

0000081e <.LVL59>:
	writedata(0x15);    //Verg2out
     81e:	85 e1       	ldi	r24, 0x15	; 21
     820:	47 df       	rcall	.-370    	; 0x6b0 <writedata>

00000822 <.LVL60>:
	writecmddata_s(0xC1,0x41);      //Power Control 2    //VGH,VGL
     822:	61 e4       	ldi	r22, 0x41	; 65
     824:	81 ec       	ldi	r24, 0xC1	; 193
     826:	80 df       	rcall	.-256    	; 0x728 <writecmddata_s>

00000828 <.LVL61>:
	writecmddata(0xC5, (const uint8_t[]){0,0x12,0x80},3);      //Power Control 3  //Vcom
     828:	1d 82       	std	Y+5, r1	; 0x05
     82a:	82 e1       	ldi	r24, 0x12	; 18
     82c:	8e 83       	std	Y+6, r24	; 0x06
     82e:	80 e8       	ldi	r24, 0x80	; 128
     830:	8f 83       	std	Y+7, r24	; 0x07

00000832 <.Loc.245>:
     832:	43 e0       	ldi	r20, 0x03	; 3
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	be 01       	movw	r22, r28
     838:	6b 5f       	subi	r22, 0xFB	; 251
     83a:	7f 4f       	sbci	r23, 0xFF	; 255
     83c:	85 ec       	ldi	r24, 0xC5	; 197
     83e:	87 df       	rcall	.-242    	; 0x74e <writecmddata>

00000840 <.LVL62>:
	writecmddata_s(0x36,0x48);      //Memory Access
     840:	68 e4       	ldi	r22, 0x48	; 72
     842:	86 e3       	ldi	r24, 0x36	; 54
     844:	71 df       	rcall	.-286    	; 0x728 <writecmddata_s>

00000846 <.LVL63>:
	writecmddata_s(0x3A,0x66);      // Interface Pixel Format 	  //18 bit
     846:	66 e6       	ldi	r22, 0x66	; 102
     848:	8a e3       	ldi	r24, 0x3A	; 58
     84a:	6e df       	rcall	.-292    	; 0x728 <writecmddata_s>

0000084c <.LVL64>:
	writecmddata_s(0XB0,0);      // Interface Mode Control			 //SDO NOT USE
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	80 eb       	ldi	r24, 0xB0	; 176
     850:	6b df       	rcall	.-298    	; 0x728 <writecmddata_s>

00000852 <.LVL65>:
	writecmddata_s(0xB1,0xa0);      //Frame rate    //60Hz
     852:	60 ea       	ldi	r22, 0xA0	; 160
     854:	81 eb       	ldi	r24, 0xB1	; 177
     856:	68 df       	rcall	.-304    	; 0x728 <writecmddata_s>

00000858 <.LVL66>:
	writecmddata_s(0xB4,2);      //Display Inversion Control    //2-dot
     858:	62 e0       	ldi	r22, 0x02	; 2
     85a:	84 eb       	ldi	r24, 0xB4	; 180
     85c:	65 df       	rcall	.-310    	; 0x728 <writecmddata_s>

0000085e <.LVL67>:
	writecommand(0XB6);      //Display Function Control  RGB/MCU Interface Control
     85e:	86 eb       	ldi	r24, 0xB6	; 182
     860:	34 df       	rcall	.-408    	; 0x6ca <writecommand>

00000862 <.LVL68>:
	writedata(0x02);    //MCU
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	25 df       	rcall	.-438    	; 0x6b0 <writedata>

00000866 <.LVL69>:
	writedata(0x02);    //Source,Gate scan dieection
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	23 df       	rcall	.-442    	; 0x6b0 <writedata>

0000086a <.LVL70>:
	writecmddata_s(0XE9,0);      // Set Image Functio// Disable 24 bit data
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	89 ee       	ldi	r24, 0xE9	; 233
     86e:	5c df       	rcall	.-328    	; 0x728 <writecmddata_s>

00000870 <.LVL71>:
	writecmddata(0xf7, (const uint8_t[]){0xa9,0x51,0x2c,0x82}, 4); // Adjust Control // D7 stream, loose
     870:	89 ea       	ldi	r24, 0xA9	; 169
     872:	89 83       	std	Y+1, r24	; 0x01
     874:	81 e5       	ldi	r24, 0x51	; 81
     876:	8a 83       	std	Y+2, r24	; 0x02
     878:	8c e2       	ldi	r24, 0x2C	; 44
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	82 e8       	ldi	r24, 0x82	; 130
     87e:	8c 83       	std	Y+4, r24	; 0x04

00000880 <.Loc.257>:
     880:	44 e0       	ldi	r20, 0x04	; 4
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	be 01       	movw	r22, r28
     886:	6f 5f       	subi	r22, 0xFF	; 255
     888:	7f 4f       	sbci	r23, 0xFF	; 255
     88a:	87 ef       	ldi	r24, 0xF7	; 247
     88c:	60 df       	rcall	.-320    	; 0x74e <writecmddata>

0000088e <.LVL72>:
  writecommand(ILI9488_SLPOUT);    //Exit Sleep
     88e:	81 e1       	ldi	r24, 0x11	; 17
     890:	1c df       	rcall	.-456    	; 0x6ca <writecommand>

00000892 <.LBB128>:
     892:	9f ef       	ldi	r25, 0xFF	; 255
     894:	2b ed       	ldi	r18, 0xDB	; 219
     896:	85 e0       	ldi	r24, 0x05	; 5

00000898 <.L1^B7>:
     898:	91 50       	subi	r25, 0x01	; 1
     89a:	20 40       	sbci	r18, 0x00	; 0
     89c:	80 40       	sbci	r24, 0x00	; 0
     89e:	e1 f7       	brne	.-8      	; 0x898 <.L1^B7>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <L0^A>

000008a2 <L0^A>:
	...

000008a4 <.LBE128>:
    writecommand(ILI9488_DISPON);    //Display on
     8a4:	89 e2       	ldi	r24, 0x29	; 41
     8a6:	11 df       	rcall	.-478    	; 0x6ca <writecommand>

000008a8 <.LVL75>:
}
     8a8:	27 96       	adiw	r28, 0x07	; 7
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	de bf       	out	0x3e, r29	; 62
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <wait_for_write_6522>:
	while(PIND & (VIA0_CA2)){
     8ba:	83 99       	sbic	0x10, 3	; 16
     8bc:	fe cf       	rjmp	.-4      	; 0x8ba <wait_for_write_6522>

000008be <.Loc.320>:
}
     8be:	08 95       	ret

000008c0 <write_ack_6522>:
		PORTD &= ~VIA0_CA1;
     8c0:	82 b3       	in	r24, 0x12	; 18
     8c2:	8f 77       	andi	r24, 0x7F	; 127
     8c4:	82 bb       	out	0x12, r24	; 18

000008c6 <.Loc.324>:
		wait_for_write_6522();
     8c6:	f9 df       	rcall	.-14     	; 0x8ba <wait_for_write_6522>

000008c8 <.LVL86>:
				PORTD |= VIA0_CA1;
     8c8:	82 b3       	in	r24, 0x12	; 18

000008ca <.Loc.326>:
     8ca:	80 68       	ori	r24, 0x80	; 128
     8cc:	82 bb       	out	0x12, r24	; 18

000008ce <.Loc.327>:
}
     8ce:	08 95       	ret

000008d0 <screen_setAddrWindow>:
 uint16_t y1) {
     8d0:	ef 92       	push	r14
     8d2:	ff 92       	push	r15
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	28 97       	sbiw	r28, 0x08	; 8
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	de bf       	out	0x3e, r29	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	f6 2e       	mov	r15, r22
     8ee:	e7 2e       	mov	r14, r23
     8f0:	12 2f       	mov	r17, r18
     8f2:	03 2f       	mov	r16, r19

000008f4 <.Loc.330>:
	 uint8_t caset_data[] = {
     8f4:	99 83       	std	Y+1, r25	; 0x01
     8f6:	8a 83       	std	Y+2, r24	; 0x02
     8f8:	5b 83       	std	Y+3, r21	; 0x03
     8fa:	4c 83       	std	Y+4, r20	; 0x04

000008fc <.Loc.332>:
	  writecmddata(ILI9488_CASET, caset_data, 4); // Column addr set
     8fc:	44 e0       	ldi	r20, 0x04	; 4
     8fe:	50 e0       	ldi	r21, 0x00	; 0

00000900 <.Loc.333>:
     900:	be 01       	movw	r22, r28

00000902 <.Loc.334>:
     902:	6f 5f       	subi	r22, 0xFF	; 255
     904:	7f 4f       	sbci	r23, 0xFF	; 255
     906:	8a e2       	ldi	r24, 0x2A	; 42

00000908 <.Loc.335>:
     908:	22 df       	rcall	.-444    	; 0x74e <writecmddata>

0000090a <.LVL91>:
	uint8_t paset_data[] = {
     90a:	ed 82       	std	Y+5, r14	; 0x05
     90c:	fe 82       	std	Y+6, r15	; 0x06
     90e:	0f 83       	std	Y+7, r16	; 0x07
     910:	18 87       	std	Y+8, r17	; 0x08

00000912 <.Loc.338>:
  writecmddata(ILI9488_PASET, paset_data, 4); // Row addr set
     912:	44 e0       	ldi	r20, 0x04	; 4
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	be 01       	movw	r22, r28
     918:	6b 5f       	subi	r22, 0xFB	; 251
     91a:	7f 4f       	sbci	r23, 0xFF	; 255
     91c:	8b e2       	ldi	r24, 0x2B	; 43
     91e:	17 df       	rcall	.-466    	; 0x74e <writecmddata>

00000920 <.LVL92>:
 }
     920:	28 96       	adiw	r28, 0x08	; 8
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	08 95       	ret

0000093a <write3BitColor>:
	color <<= 3;
     93a:	88 0f       	add	r24, r24
     93c:	88 0f       	add	r24, r24
     93e:	88 0f       	add	r24, r24

00000940 <.Loc.343>:
	color &= 0b111000;
     940:	88 73       	andi	r24, 0x38	; 56

00000942 <.Loc.345>:
	color2 &= 0b111;
     942:	67 70       	andi	r22, 0x07	; 7

00000944 <.Loc.347>:
	color |= color2;
     944:	86 2b       	or	r24, r22

00000946 <.LBB136>:
SPDR = cData;
     946:	8f b9       	out	0x0f, r24	; 15

00000948 <.L39>:
while(!(SPSR & _BV(SPIF)));
     948:	77 9b       	sbis	0x0e, 7	; 14
     94a:	fe cf       	rjmp	.-4      	; 0x948 <.L39>

0000094c <.LBE136>:
}
     94c:	08 95       	ret

0000094e <draw_char>:

void draw_char(uint32_t x, uint32_t y, screen_24bit_colors_t color,screen_24bit_colors_t bg, char c){
     94e:	2f 92       	push	r2
     950:	3f 92       	push	r3
     952:	4f 92       	push	r4
     954:	5f 92       	push	r5
     956:	6f 92       	push	r6
     958:	7f 92       	push	r7
     95a:	8f 92       	push	r8
     95c:	9f 92       	push	r9
     95e:	af 92       	push	r10
     960:	bf 92       	push	r11
     962:	cf 92       	push	r12
     964:	df 92       	push	r13
     966:	ef 92       	push	r14
     968:	ff 92       	push	r15
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	2c 97       	sbiw	r28, 0x0c	; 12
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
     982:	46 2e       	mov	r4, r22
     984:	57 2e       	mov	r5, r23
     986:	29 87       	std	Y+9, r18	; 0x09
     988:	3a 87       	std	Y+10, r19	; 0x0a
     98a:	4b 87       	std	Y+11, r20	; 0x0b
     98c:	5c 87       	std	Y+12, r21	; 0x0c
     98e:	2a 2c       	mov	r2, r10
     990:	3b 2c       	mov	r3, r11

00000992 <.Loc.380>:
	uint8_t rows[8];
	
	memcpy_P(rows, &osprey_font_bits[((size_t)c)*8], 8);
     992:	68 2d       	mov	r22, r8

00000994 <.Loc.383>:
     994:	70 e0       	ldi	r23, 0x00	; 0

00000996 <.Loc.384>:
     996:	66 0f       	add	r22, r22
     998:	77 1f       	adc	r23, r23
     99a:	66 0f       	add	r22, r22
     99c:	77 1f       	adc	r23, r23
     99e:	66 0f       	add	r22, r22
     9a0:	77 1f       	adc	r23, r23

000009a2 <.Loc.385>:
     9a2:	6e 58       	subi	r22, 0x8E	; 142
     9a4:	7f 4f       	sbci	r23, 0xFF	; 255

000009a6 <.Loc.386>:
     9a6:	48 e0       	ldi	r20, 0x08	; 8
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	ce 01       	movw	r24, r28
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	9d d6       	rcall	.+3386   	; 0x16ea <memcpy_P>

000009b0 <.LVL103>:
		screen_setAddrWindow(x,y,x+7, y+7); //each char is 8 wide 8 tall, have to be subtracted by 1 for this 
     9b0:	29 85       	ldd	r18, Y+9	; 0x09
     9b2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b4:	29 5f       	subi	r18, 0xF9	; 249
     9b6:	3f 4f       	sbci	r19, 0xFF	; 255
     9b8:	a2 01       	movw	r20, r4
     9ba:	49 5f       	subi	r20, 0xF9	; 249
     9bc:	5f 4f       	sbci	r21, 0xFF	; 255
     9be:	69 85       	ldd	r22, Y+9	; 0x09
     9c0:	7a 85       	ldd	r23, Y+10	; 0x0a
     9c2:	c2 01       	movw	r24, r4
     9c4:	85 df       	rcall	.-246    	; 0x8d0 <screen_setAddrWindow>

000009c6 <.LVL104>:
	
  writecommand(ILI9488_RAMWR); // write to RAM
     9c6:	8c e2       	ldi	r24, 0x2C	; 44
     9c8:	80 de       	rcall	.-768    	; 0x6ca <writecommand>

000009ca <.LVL105>:

	PORTB |= LCD_DC;
     9ca:	88 b3       	in	r24, 0x18	; 24

000009cc <.Loc.390>:
     9cc:	88 60       	ori	r24, 0x08	; 8
     9ce:	88 bb       	out	0x18, r24	; 24

000009d0 <.Loc.391>:
	PORTB &= ~(LCD_CS);
     9d0:	88 b3       	in	r24, 0x18	; 24
     9d2:	8f 7e       	andi	r24, 0xEF	; 239
     9d4:	88 bb       	out	0x18, r24	; 24

000009d6 <.Loc.393>:
	
	
	
	for(y=0; y<8; ++y) {
     9d6:	81 2c       	mov	r8, r1
     9d8:	91 2c       	mov	r9, r1
     9da:	54 01       	movw	r10, r8

000009dc <.Loc.395>:
     9dc:	1c c0       	rjmp	.+56     	; 0xa16 <.L42>

000009de <.L46>:
		uint8_t mask0 = 1;
		while(mask0) {
			// spiwrite(hi);
			// spiwrite(lo);
			// spiwrite(0); // added for 24 bit
			screen_24bit_colors_t color1 = (rows[y] & mask0)? color:bg;
     9de:	62 2d       	mov	r22, r2
     9e0:	73 2d       	mov	r23, r3
     9e2:	8c 2d       	mov	r24, r12
     9e4:	9d 2d       	mov	r25, r13

000009e6 <.L43>:
			mask0 <<= 1;
     9e6:	77 0c       	add	r7, r7

000009e8 <.Loc.399>:
			write24BitColor(color1);
     9e8:	49 de       	rcall	.-878    	; 0x67c <write24BitColor>

000009ea <.L45>:
		while(mask0) {
     9ea:	71 14       	cp	r7, r1
     9ec:	79 f0       	breq	.+30     	; 0xa0c <.L48>

000009ee <.Loc.402>:
			screen_24bit_colors_t color1 = (rows[y] & mask0)? color:bg;
     9ee:	e1 e0       	ldi	r30, 0x01	; 1
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	ec 0f       	add	r30, r28
     9f4:	fd 1f       	adc	r31, r29
     9f6:	e8 0d       	add	r30, r8
     9f8:	f9 1d       	adc	r31, r9
     9fa:	80 81       	ld	r24, Z

000009fc <.Loc.404>:
     9fc:	87 21       	and	r24, r7

000009fe <.Loc.405>:
     9fe:	81 15       	cp	r24, r1
     a00:	71 f3       	breq	.-36     	; 0x9de <.L46>

00000a02 <.Loc.406>:
     a02:	6e 2d       	mov	r22, r14
     a04:	7f 2d       	mov	r23, r15
     a06:	80 2f       	mov	r24, r16
     a08:	91 2f       	mov	r25, r17
     a0a:	ed cf       	rjmp	.-38     	; 0x9e6 <.L43>

00000a0c <.L48>:
	for(y=0; y<8; ++y) {
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	88 1a       	sub	r8, r24
     a10:	98 0a       	sbc	r9, r24
     a12:	a8 0a       	sbc	r10, r24
     a14:	b8 0a       	sbc	r11, r24

00000a16 <.L42>:
     a16:	88 e0       	ldi	r24, 0x08	; 8
     a18:	88 16       	cp	r8, r24
     a1a:	91 04       	cpc	r9, r1
     a1c:	a1 04       	cpc	r10, r1
     a1e:	b1 04       	cpc	r11, r1
     a20:	18 f4       	brcc	.+6      	; 0xa28 <.L49>

00000a22 <.Loc.409>:
		uint8_t mask0 = 1;
     a22:	77 24       	eor	r7, r7
     a24:	73 94       	inc	r7
     a26:	e1 cf       	rjmp	.-62     	; 0x9ea <.L45>

00000a28 <.L49>:
		}
	}


	PORTB |= LCD_CS;
     a28:	88 b3       	in	r24, 0x18	; 24

00000a2a <.Loc.411>:
     a2a:	80 61       	ori	r24, 0x10	; 16
     a2c:	88 bb       	out	0x18, r24	; 24

00000a2e <.Loc.412>:
}
     a2e:	2c 96       	adiw	r28, 0x0c	; 12
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	f8 94       	cli
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	cd bf       	out	0x3d, r28	; 61
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	ff 90       	pop	r15
     a44:	ef 90       	pop	r14

00000a46 <.Loc.413>:
     a46:	df 90       	pop	r13
     a48:	cf 90       	pop	r12
     a4a:	bf 90       	pop	r11
     a4c:	af 90       	pop	r10

00000a4e <.Loc.414>:
     a4e:	9f 90       	pop	r9
     a50:	8f 90       	pop	r8

00000a52 <.Loc.415>:
     a52:	7f 90       	pop	r7
     a54:	6f 90       	pop	r6
     a56:	5f 90       	pop	r5
     a58:	4f 90       	pop	r4
     a5a:	3f 90       	pop	r3
     a5c:	2f 90       	pop	r2
     a5e:	08 95       	ret

00000a60 <fastrect>:

void fastrect(int16_t x, int16_t y, int16_t w, int16_t h, screen_3bit_colors_t color){
     a60:	af 92       	push	r10
     a62:	bf 92       	push	r11
     a64:	cf 92       	push	r12
     a66:	df 92       	push	r13
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	0f 93       	push	r16
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	e8 2e       	mov	r14, r24
     a74:	f9 2e       	mov	r15, r25
     a76:	a6 2e       	mov	r10, r22
     a78:	b7 2e       	mov	r11, r23
     a7a:	c4 2f       	mov	r28, r20
     a7c:	d5 2f       	mov	r29, r21
     a7e:	c2 2e       	mov	r12, r18
     a80:	d3 2e       	mov	r13, r19

00000a82 <.Loc.418>:
	if((x>=320) && (y>=480)) return;
     a82:	20 e4       	ldi	r18, 0x40	; 64
     a84:	e2 16       	cp	r14, r18
     a86:	21 e0       	ldi	r18, 0x01	; 1
     a88:	f2 06       	cpc	r15, r18

00000a8a <.Loc.420>:
     a8a:	34 f0       	brlt	.+12     	; 0xa98 <.L51>

00000a8c <.Loc.421>:
     a8c:	80 ee       	ldi	r24, 0xE0	; 224
     a8e:	a8 16       	cp	r10, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	b8 06       	cpc	r11, r24

00000a94 <.Loc.422>:
     a94:	0c f0       	brlt	.+2      	; 0xa98 <.L51>

00000a96 <L0^A>:
     a96:	4f c0       	rjmp	.+158    	; 0xb36 <.L50>

00000a98 <.L51>:
	
	if((x+w-1) >= 320) w = 320-x;
     a98:	c7 01       	movw	r24, r14
     a9a:	8c 0f       	add	r24, r28
     a9c:	9d 1f       	adc	r25, r29

00000a9e <.Loc.425>:
     a9e:	81 34       	cpi	r24, 0x41	; 65
     aa0:	91 40       	sbci	r25, 0x01	; 1
     aa2:	24 f0       	brlt	.+8      	; 0xaac <.L53>

00000aa4 <.Loc.426>:
     aa4:	c0 e4       	ldi	r28, 0x40	; 64
     aa6:	d1 e0       	ldi	r29, 0x01	; 1
     aa8:	ce 19       	sub	r28, r14
     aaa:	df 09       	sbc	r29, r15

00000aac <.L53>:
	if((y+h-1) >= 480) h = 480 - y;
     aac:	c5 01       	movw	r24, r10
     aae:	8c 0d       	add	r24, r12
     ab0:	9d 1d       	adc	r25, r13

00000ab2 <.Loc.430>:
     ab2:	81 3e       	cpi	r24, 0xE1	; 225
     ab4:	91 40       	sbci	r25, 0x01	; 1
     ab6:	2c f0       	brlt	.+10     	; 0xac2 <.L54>

00000ab8 <.Loc.431>:
     ab8:	80 ee       	ldi	r24, 0xE0	; 224
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	6c 01       	movw	r12, r24
     abe:	ca 18       	sub	r12, r10
     ac0:	db 08       	sbc	r13, r11

00000ac2 <.L54>:
		writecmddata_s(0x3A, 0x61);      // Interface Pixel Format	  //3 bit
     ac2:	61 e6       	ldi	r22, 0x61	; 97

00000ac4 <.Loc.436>:
     ac4:	8a e3       	ldi	r24, 0x3A	; 58
     ac6:	30 de       	rcall	.-928    	; 0x728 <writecmddata_s>

00000ac8 <.LBE142>:

	screen_set_3bit();
	screen_setAddrWindow(x,y,x+w-1, y+h-1);
     ac8:	96 01       	movw	r18, r12
     aca:	2a 0d       	add	r18, r10
     acc:	3b 1d       	adc	r19, r11

00000ace <.Loc.439>:
     ace:	21 50       	subi	r18, 0x01	; 1
     ad0:	31 09       	sbc	r19, r1

00000ad2 <.Loc.440>:
     ad2:	ae 01       	movw	r20, r28
     ad4:	4e 0d       	add	r20, r14
     ad6:	5f 1d       	adc	r21, r15

00000ad8 <.Loc.441>:
     ad8:	41 50       	subi	r20, 0x01	; 1
     ada:	51 09       	sbc	r21, r1

00000adc <.Loc.442>:
     adc:	b5 01       	movw	r22, r10
     ade:	c7 01       	movw	r24, r14
     ae0:	f7 de       	rcall	.-530    	; 0x8d0 <screen_setAddrWindow>

00000ae2 <.LVL123>:
	
	writecommand(ILI9488_RAMWR);
     ae2:	8c e2       	ldi	r24, 0x2C	; 44
     ae4:	f2 dd       	rcall	.-1052   	; 0x6ca <writecommand>

00000ae6 <.LVL124>:
	
	PORTB |= LCD_DC;
     ae6:	88 b3       	in	r24, 0x18	; 24

00000ae8 <.Loc.445>:
     ae8:	88 60       	ori	r24, 0x08	; 8
     aea:	88 bb       	out	0x18, r24	; 24

00000aec <.Loc.446>:
	PORTB &= ~(LCD_CS);
     aec:	88 b3       	in	r24, 0x18	; 24
     aee:	8f 7e       	andi	r24, 0xEF	; 239
     af0:	88 bb       	out	0x18, r24	; 24

00000af2 <.Loc.448>:
		  for(y=0; y<h; ++y) {
     af2:	e1 2c       	mov	r14, r1
     af4:	f1 2c       	mov	r15, r1

00000af6 <.Loc.450>:
     af6:	13 c0       	rjmp	.+38     	; 0xb1e <.L55>

00000af8 <.L56>:

    for(x=0; x<(w/2); ++x) {
     af8:	95 95       	asr	r25
     afa:	87 95       	ror	r24

00000afc <.Loc.452>:
     afc:	a8 16       	cp	r10, r24
     afe:	b9 06       	cpc	r11, r25
     b00:	5c f4       	brge	.+22     	; 0xb18 <.L60>

00000b02 <.Loc.453>:
      // spiwrite(hi);
      // spiwrite(lo);
      // spiwrite(0); // added for 24 bit
      write3BitColor(color,color);
     b02:	60 2f       	mov	r22, r16
     b04:	80 2f       	mov	r24, r16
     b06:	19 df       	rcall	.-462    	; 0x93a <write3BitColor>

00000b08 <.LVL127>:
    for(x=0; x<(w/2); ++x) {
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	a8 1a       	sub	r10, r24
     b0c:	b8 0a       	sbc	r11, r24

00000b0e <.L58>:
     b0e:	ce 01       	movw	r24, r28
     b10:	dd 23       	and	r29, r29
     b12:	94 f7       	brge	.-28     	; 0xaf8 <.L56>

00000b14 <.Loc.457>:
     b14:	01 96       	adiw	r24, 0x01	; 1

00000b16 <.Loc.458>:
     b16:	f0 cf       	rjmp	.-32     	; 0xaf8 <.L56>

00000b18 <.L60>:
		  for(y=0; y<h; ++y) {
     b18:	2f ef       	ldi	r18, 0xFF	; 255
     b1a:	e2 1a       	sub	r14, r18
     b1c:	f2 0a       	sbc	r15, r18

00000b1e <.L55>:
     b1e:	ec 14       	cp	r14, r12
     b20:	fd 04       	cpc	r15, r13
     b22:	1c f4       	brge	.+6      	; 0xb2a <.L61>

00000b24 <.Loc.461>:
    for(x=0; x<(w/2); ++x) {
     b24:	a1 2c       	mov	r10, r1
     b26:	b1 2c       	mov	r11, r1
     b28:	f2 cf       	rjmp	.-28     	; 0xb0e <.L58>

00000b2a <.L61>:
    }
  }

	PORTB |= LCD_CS;
     b2a:	88 b3       	in	r24, 0x18	; 24

00000b2c <.Loc.463>:
     b2c:	80 61       	ori	r24, 0x10	; 16
     b2e:	88 bb       	out	0x18, r24	; 24

00000b30 <.LBB144>:
		writecmddata_s(0x3A, 0x66);      // Interface Pixel Format	  //18 bit
     b30:	66 e6       	ldi	r22, 0x66	; 102
     b32:	8a e3       	ldi	r24, 0x3A	; 58
     b34:	f9 dd       	rcall	.-1038   	; 0x728 <writecmddata_s>

00000b36 <.L50>:
		screen_set_18bit();

}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	0f 91       	pop	r16

00000b3c <.Loc.469>:
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	df 90       	pop	r13
     b42:	cf 90       	pop	r12
     b44:	bf 90       	pop	r11
     b46:	af 90       	pop	r10
     b48:	08 95       	ret

00000b4a <draw_scroll_screen>:
			screen_set_18bit();

}
static uint16_t tx=0, ty=0, tscroll_off=0;

void draw_scroll_screen(uint32_t vsp){
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	28 97       	sbiw	r28, 0x08	; 8
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	16 2f       	mov	r17, r22
     b64:	07 2f       	mov	r16, r23

00000b66 <.Loc.525>:
	uint8_t def_dat[] = {0,0,480>>8, 480&0xff,0,0};
     b66:	1a 82       	std	Y+2, r1	; 0x02
     b68:	19 82       	std	Y+1, r1	; 0x01
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	90 ee       	ldi	r25, 0xE0	; 224
     b6e:	9c 83       	std	Y+4, r25	; 0x04
     b70:	8b 83       	std	Y+3, r24	; 0x03
     b72:	1e 82       	std	Y+6, r1	; 0x06
     b74:	1d 82       	std	Y+5, r1	; 0x05

00000b76 <.Loc.527>:
	writecmddata(ILI9488_VSCRDEF, def_dat, sizeof(def_dat));
     b76:	46 e0       	ldi	r20, 0x06	; 6
     b78:	50 e0       	ldi	r21, 0x00	; 0
     b7a:	be 01       	movw	r22, r28

00000b7c <.Loc.528>:
     b7c:	6f 5f       	subi	r22, 0xFF	; 255
     b7e:	7f 4f       	sbci	r23, 0xFF	; 255
     b80:	83 e3       	ldi	r24, 0x33	; 51
     b82:	e5 dd       	rcall	.-1078   	; 0x74e <writecmddata>

00000b84 <.LVL157>:
	
	uint8_t scroll_dat[] = {vsp >> 8, vsp & 0xff};
     b84:	0f 83       	std	Y+7, r16	; 0x07
     b86:	18 87       	std	Y+8, r17	; 0x08

00000b88 <.Loc.531>:
	writecmddata(ILI9488_VSCRSADD, scroll_dat, sizeof(scroll_dat));
     b88:	42 e0       	ldi	r20, 0x02	; 2
     b8a:	50 e0       	ldi	r21, 0x00	; 0
     b8c:	be 01       	movw	r22, r28
     b8e:	69 5f       	subi	r22, 0xF9	; 249
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	87 e3       	ldi	r24, 0x37	; 55
     b94:	dc dd       	rcall	.-1096   	; 0x74e <writecmddata>

00000b96 <.LVL158>:
	

	
	
}
     b96:	28 96       	adiw	r28, 0x08	; 8
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	08 95       	ret

00000bac <draw_string>:

screen_3bit_colors_t term_fg = S3_BLACK;
screen_3bit_colors_t term_bg = S3_GREEN;

void draw_string(const char *restrict c){
     bac:	2f 92       	push	r2
     bae:	3f 92       	push	r3
     bb0:	4f 92       	push	r4
     bb2:	5f 92       	push	r5
     bb4:	6f 92       	push	r6
     bb6:	7f 92       	push	r7
     bb8:	8f 92       	push	r8
     bba:	9f 92       	push	r9
     bbc:	af 92       	push	r10
     bbe:	bf 92       	push	r11
     bc0:	cf 92       	push	r12
     bc2:	df 92       	push	r13
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <L0^A>

00000bd2 <L0^A>:
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	8a 83       	std	Y+2, r24	; 0x02
     bda:	9b 83       	std	Y+3, r25	; 0x03

00000bdc <.Loc.535>:
	screen_24bit_colors_t fg = screen_convert_3bit_color_to_24(term_fg);
     bdc:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <term_fg>

00000be0 <.Loc.537>:
     be0:	3f dd       	rcall	.-1410   	; 0x660 <screen_convert_3bit_color_to_24>

00000be2 <.LVL161>:
     be2:	66 2e       	mov	r6, r22
     be4:	77 2e       	mov	r7, r23
     be6:	98 2e       	mov	r9, r24
     be8:	59 2e       	mov	r5, r25

00000bea <.LVL162>:
	screen_24bit_colors_t bg = screen_convert_3bit_color_to_24(term_bg);
     bea:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <term_bg>
     bee:	38 dd       	rcall	.-1424   	; 0x660 <screen_convert_3bit_color_to_24>

00000bf0 <.LVL163>:
     bf0:	46 2e       	mov	r4, r22
     bf2:	37 2e       	mov	r3, r23
     bf4:	28 2e       	mov	r2, r24
     bf6:	99 83       	std	Y+1, r25	; 0x01

00000bf8 <.LVL164>:
	while(*c){
     bf8:	52 c0       	rjmp	.+164    	; 0xc9e <.L75>

00000bfa <.L84>:
		if(ty >= (480/8)){
			ty = 480/8-1;
     bfa:	8b e3       	ldi	r24, 0x3B	; 59
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <ty+0x1>
     c02:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <ty>

00000c06 <.Loc.544>:
			fastrect(0, tscroll_off, 320, 8, S3_GREEN);
     c06:	60 91 1d 03 	lds	r22, 0x031D	; 0x80031d <tscroll_off>
     c0a:	70 91 1e 03 	lds	r23, 0x031E	; 0x80031e <tscroll_off+0x1>
     c0e:	02 e0       	ldi	r16, 0x02	; 2
     c10:	28 e0       	ldi	r18, 0x08	; 8
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e4       	ldi	r20, 0x40	; 64
     c16:	51 e0       	ldi	r21, 0x01	; 1
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	21 df       	rcall	.-446    	; 0xa60 <fastrect>

00000c1e <.LVL166>:
			draw_scroll_screen(tscroll_off = ((tscroll_off + 8)% 480));
     c1e:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <tscroll_off>
     c22:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <tscroll_off+0x1>
     c26:	08 96       	adiw	r24, 0x08	; 8

00000c28 <.Loc.547>:
     c28:	60 ee       	ldi	r22, 0xE0	; 224
     c2a:	71 e0       	ldi	r23, 0x01	; 1
     c2c:	4a d5       	rcall	.+2708   	; 0x16c2 <__udivmodhi4>

00000c2e <.Loc.548>:
     c2e:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <tscroll_off+0x1>
     c32:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <tscroll_off>

00000c36 <.Loc.549>:
     c36:	bc 01       	movw	r22, r24
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	86 df       	rcall	.-244    	; 0xb4a <draw_scroll_screen>

00000c3e <.LVL167>:
     c3e:	3c c0       	rjmp	.+120    	; 0xcb8 <.L76>

00000c40 <.L85>:

		}
		if(*c == 0xa){
			tx = 0;
     c40:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <tx+0x1>
     c44:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <tx>

00000c48 <.Loc.552>:
			++ty;
     c48:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <ty>
     c4c:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <ty+0x1>
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <ty+0x1>
     c56:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <ty>

00000c5a <.Loc.553>:
			++c;
     c5a:	11 96       	adiw	r26, 0x01	; 1
     c5c:	bb 83       	std	Y+3, r27	; 0x03
     c5e:	aa 83       	std	Y+2, r26	; 0x02

00000c60 <.Loc.554>:
			continue;
     c60:	1e c0       	rjmp	.+60     	; 0xc9e <.L75>

00000c62 <.L86>:
		}
		if(*c == 0xd){
			tx=0;
     c62:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <tx+0x1>
     c66:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <tx>

00000c6a <.Loc.557>:
			++c;
     c6a:	ea 81       	ldd	r30, Y+2	; 0x02
     c6c:	fb 81       	ldd	r31, Y+3	; 0x03
     c6e:	31 96       	adiw	r30, 0x01	; 1
     c70:	fb 83       	std	Y+3, r31	; 0x03
     c72:	ea 83       	std	Y+2, r30	; 0x02

00000c74 <.Loc.558>:
			continue;
     c74:	14 c0       	rjmp	.+40     	; 0xc9e <.L75>

00000c76 <.L87>:
		}
		if(*c == 127){
			--tx;
     c76:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <tx>
     c7a:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <tx+0x1>
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <tx+0x1>
     c84:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <tx>

00000c88 <.Loc.560>:
			++c;
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	9b 81       	ldd	r25, Y+3	; 0x03
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	9b 83       	std	Y+3, r25	; 0x03
     c90:	8a 83       	std	Y+2, r24	; 0x02

00000c92 <.Loc.561>:
			continue;
     c92:	05 c0       	rjmp	.+10     	; 0xc9e <.L75>

00000c94 <.L81>:
		if(tx >= (320/8)){
			++ty;
			tx = 0;
		}
		
		++c;
     c94:	aa 81       	ldd	r26, Y+2	; 0x02
     c96:	bb 81       	ldd	r27, Y+3	; 0x03
     c98:	11 96       	adiw	r26, 0x01	; 1
     c9a:	bb 83       	std	Y+3, r27	; 0x03
     c9c:	aa 83       	std	Y+2, r26	; 0x02

00000c9e <.L75>:
	while(*c){
     c9e:	ea 81       	ldd	r30, Y+2	; 0x02
     ca0:	fb 81       	ldd	r31, Y+3	; 0x03
     ca2:	80 81       	ld	r24, Z
     ca4:	81 15       	cp	r24, r1
     ca6:	09 f4       	brne	.+2      	; 0xcaa <.Loc.564>

00000ca8 <L0^A>:
     ca8:	57 c0       	rjmp	.+174    	; 0xd58 <.L83>

00000caa <.Loc.564>:
		if(ty >= (480/8)){
     caa:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <ty>
     cae:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <ty+0x1>

00000cb2 <.Loc.566>:
     cb2:	cc 97       	sbiw	r24, 0x3c	; 60
     cb4:	08 f0       	brcs	.+2      	; 0xcb8 <.L76>

00000cb6 <L0^A>:
     cb6:	a1 cf       	rjmp	.-190    	; 0xbfa <.L84>

00000cb8 <.L76>:
		if(*c == 0xa){
     cb8:	aa 81       	ldd	r26, Y+2	; 0x02
     cba:	bb 81       	ldd	r27, Y+3	; 0x03
     cbc:	ec 91       	ld	r30, X

00000cbe <.Loc.569>:
     cbe:	ea 30       	cpi	r30, 0x0A	; 10
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <.Loc.570>

00000cc2 <L0^A>:
     cc2:	be cf       	rjmp	.-132    	; 0xc40 <.L85>

00000cc4 <.Loc.570>:
		if(*c == 0xd){
     cc4:	ed 30       	cpi	r30, 0x0D	; 13
     cc6:	69 f2       	breq	.-102    	; 0xc62 <.L86>

00000cc8 <.Loc.572>:
		if(*c == 127){
     cc8:	ef 37       	cpi	r30, 0x7F	; 127
     cca:	a9 f2       	breq	.-86     	; 0xc76 <.L87>

00000ccc <.Loc.574>:
		draw_char(tx*8, (ty*8 + tscroll_off)%480, fg, bg, *c);
     ccc:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <ty>
     cd0:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <ty+0x1>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25

00000ce0 <.Loc.576>:
     ce0:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <tscroll_off>
     ce4:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <tscroll_off+0x1>
     ce8:	82 0f       	add	r24, r18
     cea:	93 1f       	adc	r25, r19

00000cec <.Loc.577>:
     cec:	60 ee       	ldi	r22, 0xE0	; 224
     cee:	71 e0       	ldi	r23, 0x01	; 1
     cf0:	e8 d4       	rcall	.+2512   	; 0x16c2 <__udivmodhi4>

00000cf2 <.Loc.578>:
     cf2:	60 91 21 03 	lds	r22, 0x0321	; 0x800321 <tx>
     cf6:	70 91 22 03 	lds	r23, 0x0322	; 0x800322 <tx+0x1>
     cfa:	66 0f       	add	r22, r22
     cfc:	77 1f       	adc	r23, r23
     cfe:	66 0f       	add	r22, r22
     d00:	77 1f       	adc	r23, r23
     d02:	66 0f       	add	r22, r22
     d04:	77 1f       	adc	r23, r23

00000d06 <.Loc.579>:
     d06:	9c 01       	movw	r18, r24
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	8e 2e       	mov	r8, r30
     d12:	a4 2c       	mov	r10, r4
     d14:	b3 2c       	mov	r11, r3
     d16:	c2 2c       	mov	r12, r2
     d18:	d9 80       	ldd	r13, Y+1	; 0x01
     d1a:	e6 2c       	mov	r14, r6
     d1c:	f7 2c       	mov	r15, r7
     d1e:	09 2d       	mov	r16, r9
     d20:	15 2d       	mov	r17, r5
     d22:	15 de       	rcall	.-982    	; 0x94e <draw_char>

00000d24 <.LVL175>:
		++tx;
     d24:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <tx>
     d28:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <tx+0x1>
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <tx+0x1>
     d32:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <tx>

00000d36 <.Loc.581>:
		if(tx >= (320/8)){
     d36:	88 97       	sbiw	r24, 0x28	; 40
     d38:	08 f4       	brcc	.+2      	; 0xd3c <.Loc.583>

00000d3a <L0^A>:
     d3a:	ac cf       	rjmp	.-168    	; 0xc94 <.L81>

00000d3c <.Loc.583>:
			++ty;
     d3c:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <ty>
     d40:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <ty+0x1>
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <ty+0x1>
     d4a:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <ty>

00000d4e <.Loc.584>:
			tx = 0;
     d4e:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <tx+0x1>
     d52:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <tx>
     d56:	9e cf       	rjmp	.-196    	; 0xc94 <.L81>

00000d58 <.L83>:
	}
}
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	ff 90       	pop	r15
     d68:	ef 90       	pop	r14
     d6a:	df 90       	pop	r13
     d6c:	cf 90       	pop	r12
     d6e:	bf 90       	pop	r11
     d70:	af 90       	pop	r10
     d72:	9f 90       	pop	r9

00000d74 <.Loc.587>:
     d74:	8f 90       	pop	r8
     d76:	7f 90       	pop	r7

00000d78 <.Loc.588>:
     d78:	6f 90       	pop	r6

00000d7a <.Loc.589>:
     d7a:	5f 90       	pop	r5
     d7c:	4f 90       	pop	r4

00000d7e <.Loc.590>:
     d7e:	3f 90       	pop	r3
     d80:	2f 90       	pop	r2
     d82:	08 95       	ret

00000d84 <__vector_1>:
  }

	PORTB |= LCD_CS;
}

ISR (INT0_vect) { /* PS2 interrupt */
     d84:	1f 92       	push	r1
     d86:	0f 92       	push	r0
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	0f 92       	push	r0
     d8c:	11 24       	eor	r1, r1
     d8e:	2f 93       	push	r18
     d90:	3f 93       	push	r19
     d92:	4f 93       	push	r20
     d94:	5f 93       	push	r21
     d96:	6f 93       	push	r22
     d98:	7f 93       	push	r23
     d9a:	8f 93       	push	r24
     d9c:	9f 93       	push	r25
     d9e:	af 93       	push	r26
     da0:	bf 93       	push	r27
     da2:	ef 93       	push	r30
     da4:	ff 93       	push	r31

00000da6 <.Loc.633>:


			ps2_read();
     da6:	9c d1       	rcall	.+824    	; 0x10e0 <ps2_read>

00000da8 <.LVL193>:
	
	


}
     da8:	ff 91       	pop	r31
     daa:	ef 91       	pop	r30
     dac:	bf 91       	pop	r27
     dae:	af 91       	pop	r26
     db0:	9f 91       	pop	r25
     db2:	8f 91       	pop	r24
     db4:	7f 91       	pop	r23
     db6:	6f 91       	pop	r22
     db8:	5f 91       	pop	r21
     dba:	4f 91       	pop	r20
     dbc:	3f 91       	pop	r19
     dbe:	2f 91       	pop	r18
     dc0:	0f 90       	pop	r0
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	0f 90       	pop	r0
     dc6:	1f 90       	pop	r1
     dc8:	18 95       	reti

00000dca <get_6522>:
    CMD_SETC,
    CMD_SETFGBG
    
} cmd_t;

uint8_t get_6522(void) {
     dca:	cf 93       	push	r28

00000dcc <.L100>:
    while (PIND & (VIA1_CA2 )) {
     dcc:	85 99       	sbic	0x10, 5	; 16
     dce:	fe cf       	rjmp	.-4      	; 0xdcc <.L100>

00000dd0 <.LBE154>:
    wait_for_6522();

    uint8_t ret = PINC;
     dd0:	c3 b3       	in	r28, 0x13	; 19

00000dd2 <.LVL194>:
        ack_6522();
     dd2:	5e dc       	rcall	.-1860   	; 0x690 <ack_6522>

00000dd4 <.LVL195>:

    
    return ret;
}
     dd4:	8c 2f       	mov	r24, r28
     dd6:	cf 91       	pop	r28

00000dd8 <.Loc.643>:
     dd8:	08 95       	ret

00000dda <float_push>:

float float_stack[16];
uint8_t float_sp = 0;;
void float_push(float in){
	float_stack[float_sp++] = in;
     dda:	e0 91 da 02 	lds	r30, 0x02DA	; 0x8002da <float_sp>
     dde:	21 e0       	ldi	r18, 0x01	; 1
     de0:	2e 0f       	add	r18, r30
     de2:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <float_sp>
     de6:	f0 e0       	ldi	r31, 0x00	; 0

00000de8 <.Loc.647>:
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	ee 0f       	add	r30, r30
     dee:	ff 1f       	adc	r31, r31
     df0:	e5 52       	subi	r30, 0x25	; 37
     df2:	fd 4f       	sbci	r31, 0xFD	; 253
     df4:	60 83       	st	Z, r22
     df6:	71 83       	std	Z+1, r23	; 0x01
     df8:	82 83       	std	Z+2, r24	; 0x02
     dfa:	93 83       	std	Z+3, r25	; 0x03

00000dfc <.Loc.648>:
	
}
     dfc:	08 95       	ret

00000dfe <get_short_6522>:


uint16_t get_short_6522(void){
     dfe:	cf 93       	push	r28

00000e00 <.LVL198>:
	uint16_t ret = 0;
	uint8_t *raw = (uint8_t*)&ret;
	raw[1] = get_6522();
     e00:	e4 df       	rcall	.-56     	; 0xdca <get_6522>

00000e02 <.LVL199>:
     e02:	c8 2f       	mov	r28, r24

00000e04 <.Loc.654>:
	raw[0] = get_6522();
     e04:	e2 df       	rcall	.-60     	; 0xdca <get_6522>

00000e06 <.LVL200>:
	
	return ret;
}
     e06:	9c 2f       	mov	r25, r28
     e08:	cf 91       	pop	r28
     e0a:	08 95       	ret

00000e0c <get_float_6522>:

float get_float_6522(void){
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	00 d0       	rcall	.+0      	; 0xe1a <L0^A>

00000e1a <L0^A>:
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <L0^A>

00000e1c <L0^A>:
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62

00000e20 <.Loc.659>:
	float ret = 0;
     e20:	19 82       	std	Y+1, r1	; 0x01
     e22:	1a 82       	std	Y+2, r1	; 0x02
     e24:	1b 82       	std	Y+3, r1	; 0x03
     e26:	1c 82       	std	Y+4, r1	; 0x04

00000e28 <.LBB156>:
	uint8_t *raw = (uint8_t*)&ret;
	
	for(int i=4;i>0;--i){
     e28:	04 e0       	ldi	r16, 0x04	; 4
     e2a:	10 e0       	ldi	r17, 0x00	; 0

00000e2c <.Loc.665>:
     e2c:	0c c0       	rjmp	.+24     	; 0xe46 <.L104>

00000e2e <.L105>:
		raw[i-1] = get_6522();		//big endian conversion
     e2e:	01 50       	subi	r16, 0x01	; 1
     e30:	11 09       	sbc	r17, r1

00000e32 <.Loc.668>:
     e32:	ee 24       	eor	r14, r14
     e34:	e3 94       	inc	r14
     e36:	f1 2c       	mov	r15, r1
     e38:	ec 0e       	add	r14, r28
     e3a:	fd 1e       	adc	r15, r29
     e3c:	e0 0e       	add	r14, r16
     e3e:	f1 1e       	adc	r15, r17

00000e40 <.Loc.669>:
     e40:	c4 df       	rcall	.-120    	; 0xdca <get_6522>

00000e42 <.LVL204>:
     e42:	f7 01       	movw	r30, r14
     e44:	80 83       	st	Z, r24

00000e46 <.L104>:
	for(int i=4;i>0;--i){
     e46:	01 15       	cp	r16, r1
     e48:	11 05       	cpc	r17, r1
     e4a:	09 f0       	breq	.+2      	; 0xe4e <.LBE156>

00000e4c <L0^A>:
     e4c:	84 f7       	brge	.-32     	; 0xe2e <.L105>

00000e4e <.LBE156>:
	}
	
	return ret;
     e4e:	69 81       	ldd	r22, Y+1	; 0x01
     e50:	7a 81       	ldd	r23, Y+2	; 0x02
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	9c 81       	ldd	r25, Y+4	; 0x04

00000e56 <.Loc.675>:
}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16

00000e66 <.Loc.676>:
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	08 95       	ret

00000e6c <main>:

uint8_t sprites[16][8][4] __attribute__((section(".data"))); //2 pixels per byte

int main(void) {
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <L0^A>

00000e6e <L0^A>:
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <L0^A>

00000e70 <L0^A>:
     e70:	00 d0       	rcall	.+0      	; 0xe72 <L0^A>

00000e72 <L0^A>:
     e72:	0f 92       	push	r0
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62

00000e78 <.LBB157>:
    
    // Initialize UART modules
    for (int i = 0; i < serialAvailable(); i++) {
     e78:	00 e0       	ldi	r16, 0x00	; 0
     e7a:	10 e0       	ldi	r17, 0x00	; 0

00000e7c <.L107>:
     e7c:	d8 d1       	rcall	.+944    	; 0x122e <serialAvailable>

00000e7e <.LVL209>:
     e7e:	08 17       	cp	r16, r24
     e80:	11 05       	cpc	r17, r1
     e82:	3c f4       	brge	.+14     	; 0xe92 <.L126>

00000e84 <.Loc.684>:
        serialInit(i, 12);
     e84:	6c e0       	ldi	r22, 0x0C	; 12
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	80 2f       	mov	r24, r16
     e8a:	d3 d1       	rcall	.+934    	; 0x1232 <serialInit>

00000e8c <.LVL210>:
    for (int i = 0; i < serialAvailable(); i++) {
     e8c:	0f 5f       	subi	r16, 0xFF	; 255
     e8e:	1f 4f       	sbci	r17, 0xFF	; 255

00000e90 <.Loc.686>:
     e90:	f5 cf       	rjmp	.-22     	; 0xe7c <.L107>

00000e92 <.L126>:
    }

    // Enable Interrupts
    sei();
     e92:	78 94       	sei

00000e94 <.Loc.689>:
	screen_init();
     e94:	82 dc       	rcall	.-1788   	; 0x79a <screen_init>

00000e96 <.LVL213>:
	ps2_init();
     e96:	96 d0       	rcall	.+300    	; 0xfc4 <ps2_init>

00000e98 <.LBB158>:
SPDR = cData;
     e98:	8f ef       	ldi	r24, 0xFF	; 255
     e9a:	8f b9       	out	0x0f, r24	; 15

00000e9c <.L109>:
while(!(SPSR & _BV(SPIF)));
     e9c:	77 9b       	sbis	0x0e, 7	; 14
     e9e:	fe cf       	rjmp	.-4      	; 0xe9c <.L109>

00000ea0 <.LBB160>:
SPDR = cData;
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	8f b9       	out	0x0f, r24	; 15

00000ea4 <.L110>:
while(!(SPSR & _BV(SPIF)));
     ea4:	77 9b       	sbis	0x0e, 7	; 14
     ea6:	fe cf       	rjmp	.-4      	; 0xea4 <.L110>

00000ea8 <.LBB162>:
SPDR = cData;
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	8f b9       	out	0x0f, r24	; 15

00000eac <.L111>:
while(!(SPSR & _BV(SPIF)));
     eac:	77 9b       	sbis	0x0e, 7	; 14
     eae:	fe cf       	rjmp	.-4      	; 0xeac <.L111>

00000eb0 <.LBB164>:
SPDR = cData;
     eb0:	8f ef       	ldi	r24, 0xFF	; 255
     eb2:	8f b9       	out	0x0f, r24	; 15

00000eb4 <.L112>:
while(!(SPSR & _BV(SPIF)));
     eb4:	77 9b       	sbis	0x0e, 7	; 14
     eb6:	fe cf       	rjmp	.-4      	; 0xeb4 <.L112>

00000eb8 <.LBE164>:
	screen_write(0xff);
	screen_write(0xff);
	screen_write(0xff);
	screen_write(0xff);

	fastrect(0,0,320,480,S3_GREEN);
     eb8:	02 e0       	ldi	r16, 0x02	; 2

00000eba <.Loc.720>:
     eba:	20 ee       	ldi	r18, 0xE0	; 224
     ebc:	31 e0       	ldi	r19, 0x01	; 1
     ebe:	40 e4       	ldi	r20, 0x40	; 64
     ec0:	51 e0       	ldi	r21, 0x01	; 1
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	ca dd       	rcall	.-1132   	; 0xa60 <fastrect>

00000ecc <.LVL220>:

    // Print Welcome Message
    serialWriteString(0, "\r\nOsprey SIO serial interface initialised\n\r");
     ecc:	65 e7       	ldi	r22, 0x75	; 117
     ece:	72 e0       	ldi	r23, 0x02	; 2
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	97 d3       	rcall	.+1838   	; 0x1602 <serialWriteString>

00000ed4 <.LVL221>:
	draw_string("Osprey SIO graphics interface initialised\n");
     ed4:	81 ea       	ldi	r24, 0xA1	; 161
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	69 de       	rcall	.-814    	; 0xbac <draw_string>

00000eda <.LVL222>:

    //GICR |= 1 << INT0; //enable int0 so we can receive data ready from 6522
    //MCUCR &= (1 << ISC00) | (1 << ISC01); //int0 triggers at low level
	

    PORTD |= VIA1_CA1; //6522 data taken = high;
     eda:	82 b3       	in	r24, 0x12	; 18

00000edc <.Loc.724>:
     edc:	80 61       	ori	r24, 0x10	; 16
     ede:	82 bb       	out	0x12, r24	; 18

00000ee0 <.Loc.725>:
    DDRD |= VIA1_CA1;
     ee0:	81 b3       	in	r24, 0x11	; 17

00000ee2 <.Loc.726>:
     ee2:	80 61       	ori	r24, 0x10	; 16
     ee4:	81 bb       	out	0x11, r24	; 17

00000ee6 <.Loc.727>:
    
    PORTD |= VIA0_CA1; //6522_0 data ready = high;
     ee6:	82 b3       	in	r24, 0x12	; 18

00000ee8 <.Loc.728>:
     ee8:	80 68       	ori	r24, 0x80	; 128
     eea:	82 bb       	out	0x12, r24	; 18

00000eec <.Loc.729>:
    DDRD |= VIA0_CA1;
     eec:	81 b3       	in	r24, 0x11	; 17

00000eee <.Loc.730>:
     eee:	80 68       	ori	r24, 0x80	; 128
     ef0:	81 bb       	out	0x11, r24	; 17

00000ef2 <.Loc.731>:
    
    DDRA = 0xff; //6522 receive port high
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	8a bb       	out	0x1a, r24	; 26
     ef6:	34 c0       	rjmp	.+104    	; 0xf60 <.L124>

00000ef8 <.L114>:


    // Wait for incoming bytes from 6522
    while (1) {
        cmd_t in = get_6522();
        switch (in) {
     ef8:	85 30       	cpi	r24, 0x05	; 5
     efa:	c1 f0       	breq	.+48     	; 0xf2c <.L119>

00000efc <.Loc.734>:
     efc:	86 30       	cpi	r24, 0x06	; 6
     efe:	09 f0       	breq	.+2      	; 0xf02 <.LBB167>

00000f00 <L0^A>:
     f00:	49 c0       	rjmp	.+146    	; 0xf94 <.L118>

00000f02 <.LBB167>:
			case CMD_SETC: //two args: y and x
				ty = get_short_6522();
				tx = get_short_6522();
				break;
			case CMD_SETFGBG:
				uint8_t in_fgbg = get_6522(); //5:3 = fg,2:0 = bg
     f02:	63 df       	rcall	.-314    	; 0xdca <get_6522>

00000f04 <.LVL224>:
				term_fg = (in_fgbg >> 3) & 0b111;
     f04:	98 2f       	mov	r25, r24
     f06:	96 95       	lsr	r25
     f08:	96 95       	lsr	r25
     f0a:	96 95       	lsr	r25
     f0c:	97 70       	andi	r25, 0x07	; 7

00000f0e <.Loc.739>:
     f0e:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <term_fg>

00000f12 <.Loc.740>:
				term_bg = in_fgbg& 0b111;
     f12:	87 70       	andi	r24, 0x07	; 7

00000f14 <.Loc.742>:
     f14:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <term_bg>

00000f18 <.Loc.743>:
				break;
     f18:	23 c0       	rjmp	.+70     	; 0xf60 <.L124>

00000f1a <.L113>:
				float_push(get_float_6522());
     f1a:	78 df       	rcall	.-272    	; 0xe0c <get_float_6522>

00000f1c <.LVL227>:
     f1c:	c6 2e       	mov	r12, r22
     f1e:	d7 2e       	mov	r13, r23
     f20:	e8 2e       	mov	r14, r24
     f22:	f9 2e       	mov	r15, r25
     f24:	c7 01       	movw	r24, r14
     f26:	b6 01       	movw	r22, r12
     f28:	58 df       	rcall	.-336    	; 0xdda <float_push>

00000f2a <.LVL228>:
     f2a:	1a c0       	rjmp	.+52     	; 0xf60 <.L124>

00000f2c <.L119>:
				ty = get_short_6522();
     f2c:	68 df       	rcall	.-304    	; 0xdfe <get_short_6522>

00000f2e <.LVL230>:
     f2e:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <ty+0x1>
     f32:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <ty>

00000f36 <.Loc.749>:
				tx = get_short_6522();
     f36:	63 df       	rcall	.-314    	; 0xdfe <get_short_6522>

00000f38 <.LVL231>:
     f38:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <tx+0x1>
     f3c:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <tx>

00000f40 <.Loc.752>:
				break;
     f40:	0f c0       	rjmp	.+30     	; 0xf60 <.L124>

00000f42 <.L125>:
        switch (in) {
     f42:	10 e0       	ldi	r17, 0x00	; 0

00000f44 <.L116>:
			case CMD_GETC:
				unsigned char c = 0;
			    while(!serialHasChar(0) && !(c=ps2_buf_pull())){
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	f0 d1       	rcall	.+992    	; 0x1328 <serialHasChar>

00000f48 <.LVL234>:
     f48:	81 11       	cpse	r24, r1
     f4a:	04 c0       	rjmp	.+8      	; 0xf54 <.L121>

00000f4c <.Loc.759>:
     f4c:	e5 d0       	rcall	.+458    	; 0x1118 <ps2_buf_pull>

00000f4e <.LVL235>:
     f4e:	18 2f       	mov	r17, r24

00000f50 <.Loc.760>:
     f50:	81 15       	cp	r24, r1
     f52:	c1 f3       	breq	.-16     	; 0xf44 <.L116>

00000f54 <.L121>:
				
				}
				if(serialHasChar(0)){
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	e8 d1       	rcall	.+976    	; 0x1328 <serialHasChar>

00000f58 <.LVL237>:
     f58:	81 11       	cpse	r24, r1
     f5a:	18 c0       	rjmp	.+48     	; 0xf8c <.L127>

00000f5c <.Loc.764>:
					PORTA = serialGet(0); 
				}
				else{
					PORTA = c;
     f5c:	1b bb       	out	0x1b, r17	; 27

00000f5e <.L123>:
				}
				write_ack_6522();
     f5e:	b0 dc       	rcall	.-1696   	; 0x8c0 <write_ack_6522>

00000f60 <.L124>:
        cmd_t in = get_6522();
     f60:	34 df       	rcall	.-408    	; 0xdca <get_6522>

00000f62 <.LVL239>:
        switch (in) {
     f62:	84 30       	cpi	r24, 0x04	; 4
     f64:	d1 f2       	breq	.-76     	; 0xf1a <.L113>
     f66:	08 f0       	brcs	.+2      	; 0xf6a <L0^A+0x2>

00000f68 <L0^A>:
     f68:	c7 cf       	rjmp	.-114    	; 0xef8 <.L114>
     f6a:	82 30       	cpi	r24, 0x02	; 2
     f6c:	c9 f3       	breq	.-14     	; 0xf60 <.L124>
     f6e:	83 30       	cpi	r24, 0x03	; 3
     f70:	41 f3       	breq	.-48     	; 0xf42 <.L125>
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	79 f4       	brne	.+30     	; 0xf94 <.L118>

00000f76 <.Loc.773>:
				char b = get_6522();
     f76:	29 df       	rcall	.-430    	; 0xdca <get_6522>

00000f78 <.LVL240>:
     f78:	18 2f       	mov	r17, r24

00000f7a <.LVL241>:
				serialWrite(0, b);
     f7a:	68 2f       	mov	r22, r24
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	ce d2       	rcall	.+1436   	; 0x151c <serialWrite>

00000f80 <.LVL242>:
				char test[] = {b, 0};
     f80:	19 83       	std	Y+1, r17	; 0x01
     f82:	1a 82       	std	Y+2, r1	; 0x02

00000f84 <.Loc.779>:
				draw_string(test);
     f84:	ce 01       	movw	r24, r28
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	11 de       	rcall	.-990    	; 0xbac <draw_string>

00000f8a <.LVL243>:
			break;
     f8a:	ea cf       	rjmp	.-44     	; 0xf60 <.L124>

00000f8c <.L127>:
					PORTA = serialGet(0); 
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	e3 d1       	rcall	.+966    	; 0x1356 <serialGet>

00000f90 <.LVL245>:
     f90:	8b bb       	out	0x1b, r24	; 27
     f92:	e5 cf       	rjmp	.-54     	; 0xf5e <.L123>

00000f94 <.L118>:
				break;
			default:;
				{
					char test[7];
					snprintf(test, 7, "?%.2x\r\n", in);
     f94:	1f 92       	push	r1
     f96:	8f 93       	push	r24
     f98:	8c ec       	ldi	r24, 0xCC	; 204
     f9a:	92 e0       	ldi	r25, 0x02	; 2

00000f9c <.Loc.787>:
     f9c:	9f 93       	push	r25
     f9e:	8f 93       	push	r24
     fa0:	1f 92       	push	r1
     fa2:	87 e0       	ldi	r24, 0x07	; 7
     fa4:	8f 93       	push	r24
     fa6:	8e 01       	movw	r16, r28
     fa8:	0f 5f       	subi	r16, 0xFF	; 255
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
     fac:	1f 93       	push	r17
     fae:	0f 93       	push	r16
     fb0:	a5 d3       	rcall	.+1866   	; 0x16fc <snprintf>

00000fb2 <.LVL248>:
					serialWriteString(0, test);
     fb2:	b8 01       	movw	r22, r16
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	25 d3       	rcall	.+1610   	; 0x1602 <serialWriteString>

00000fb8 <.LBE168>:
				}
				break;
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61

00000fc2 <.Loc.790>:
    while (1) {
     fc2:	ce cf       	rjmp	.-100    	; 0xf60 <.L124>

00000fc4 <ps2_init>:
     fc4:	81 b3       	in	r24, 0x11	; 17
     fc6:	8b 7f       	andi	r24, 0xFB	; 251


void
ps2_init(void)
{
	DDRD &= ~(1 << PS2_PIN_CLOCK); /* set pin CLOCK as input */
     fc8:	81 bb       	out	0x11, r24	; 17

00000fca <.Loc.3>:
	PS2_DDR &= ~(1 << PS2_PIN_DATA);  /* set pin DATA as input */
     fca:	87 b3       	in	r24, 0x17	; 23
     fcc:	8d 7f       	andi	r24, 0xFD	; 253
     fce:	87 bb       	out	0x17, r24	; 23

00000fd0 <.Loc.5>:
	PORTD |= (1 << PS2_PIN_CLOCK); /* enable pin CLOCK pull-up */
     fd0:	82 b3       	in	r24, 0x12	; 18

00000fd2 <.Loc.6>:
     fd2:	84 60       	ori	r24, 0x04	; 4
     fd4:	82 bb       	out	0x12, r24	; 18

00000fd6 <.Loc.7>:
	PS2_PORT |= (1 << PS2_PIN_DATA);  /* enable pin DATA pull-up */
     fd6:	88 b3       	in	r24, 0x18	; 24

00000fd8 <.Loc.8>:
     fd8:	82 60       	ori	r24, 0x02	; 2
     fda:	88 bb       	out	0x18, r24	; 24

00000fdc <.Loc.9>:
	
	GICR |= 1 << INT0; //clock int enbale
     fdc:	8b b7       	in	r24, 0x3b	; 59

00000fde <.Loc.10>:
     fde:	80 64       	ori	r24, 0x40	; 64
     fe0:	8b bf       	out	0x3b, r24	; 59

00000fe2 <.Loc.11>:
	MCUCR |= 1 << ISC01;
     fe2:	85 b7       	in	r24, 0x35	; 53

00000fe4 <.Loc.12>:
     fe4:	82 60       	ori	r24, 0x02	; 2
     fe6:	85 bf       	out	0x35, r24	; 53

00000fe8 <.Loc.13>:

}
     fe8:	08 95       	ret

00000fea <ps2_buf_push>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fea:	f8 94       	cli

00000fec <.LBE15>:
 * typically called in PCINT interrupt */
void
ps2_buf_push(unsigned char c)
{
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		_buf[_bufend] = c;
     fec:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <_bufend>
     ff0:	e9 2f       	mov	r30, r25
     ff2:	f0 e0       	ldi	r31, 0x00	; 0

00000ff4 <.Loc.24>:
     ff4:	eb 5d       	subi	r30, 0xDB	; 219
     ff6:	fc 4f       	sbci	r31, 0xFC	; 252
     ff8:	80 83       	st	Z, r24

00000ffa <.Loc.25>:
		if (_bufend+1 == PS2_BUF_LEN)
     ffa:	9f 37       	cpi	r25, 0x7F	; 127
     ffc:	59 f0       	breq	.+22     	; 0x1014 <.L7>

00000ffe <.Loc.27>:
			_bufend = 0;
		else
			_bufend++;
     ffe:	9f 5f       	subi	r25, 0xFF	; 255
    1000:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <_bufend>

00001004 <.L4>:
		if (_bufend == _bufbeg) { /* buffer full, remove a char */
    1004:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <_bufend>
    1008:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <_bufbeg>

0000100c <.Loc.31>:
    100c:	98 17       	cp	r25, r24
    100e:	29 f0       	breq	.+10     	; 0x101a <.L8>

00001010 <.L5>:
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1010:	78 94       	sei

00001012 <.LBE17>:
				_bufbeg = 0;
			else
				_bufbeg++;
		}
	}
}
    1012:	08 95       	ret

00001014 <.L7>:
			_bufend = 0;
    1014:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <_bufend>
    1018:	f5 cf       	rjmp	.-22     	; 0x1004 <.L4>

0000101a <.L8>:
			if (_bufbeg+1 == PS2_BUF_LEN)
    101a:	8f 37       	cpi	r24, 0x7F	; 127
    101c:	21 f0       	breq	.+8      	; 0x1026 <.L9>

0000101e <.Loc.44>:
				_bufbeg++;
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <_bufbeg>
    1024:	f5 cf       	rjmp	.-22     	; 0x1010 <.L5>

00001026 <.L9>:
				_bufbeg = 0;
    1026:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <_bufbeg>
    102a:	f2 cf       	rjmp	.-28     	; 0x1010 <.L5>

0000102c <_decode>:
{
	static unsigned char is_up = 0;
	static unsigned char shift = PS2_SHIFT_DEFAULT;
	unsigned char i;
 
	if (!is_up) {
    102c:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <is_up.1>

00001030 <.Loc.54>:
    1030:	91 11       	cpse	r25, r1
    1032:	49 c0       	rjmp	.+146    	; 0x10c6 <.L11>

00001034 <.Loc.55>:
		switch (sc) {
    1034:	89 35       	cpi	r24, 0x59	; 89
    1036:	89 f0       	breq	.+34     	; 0x105a <.L12>
    1038:	80 3f       	cpi	r24, 0xF0	; 240
    103a:	39 f0       	breq	.+14     	; 0x104a <.L13>
    103c:	82 31       	cpi	r24, 0x12	; 18
    103e:	49 f0       	breq	.+18     	; 0x1052 <.L14>

00001040 <.Loc.56>:
			break;
		default:
#if PS2_DEBUG
			ps2_buf_push(sc);
#else
			if(!shift) {
    1040:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <shift.0>

00001044 <.Loc.58>:
    1044:	21 15       	cp	r18, r1
    1046:	71 f0       	breq	.+28     	; 0x1064 <.L17>
    1048:	26 c0       	rjmp	.+76     	; 0x1096 <.L18>

0000104a <.L13>:
			is_up = 1;
    104a:	81 e0       	ldi	r24, 0x01	; 1

0000104c <.Loc.61>:
    104c:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <is_up.1>

00001050 <.Loc.62>:
			break;
    1050:	08 95       	ret

00001052 <.L14>:
			shift = 1;
    1052:	81 e0       	ldi	r24, 0x01	; 1

00001054 <.Loc.65>:
    1054:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <shift.0>

00001058 <.Loc.66>:
			break;
    1058:	08 95       	ret

0000105a <.L12>:
			shift = 1;
    105a:	81 e0       	ldi	r24, 0x01	; 1

0000105c <.Loc.69>:
    105c:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <shift.0>

00001060 <.Loc.70>:
			break;
    1060:	08 95       	ret

00001062 <.L20>:
				
				for(i = 0; pgm_read_byte(&_unshifted[i][0])!=sc && pgm_read_byte(&_unshifted[i][0]); i++);
    1062:	2f 5f       	subi	r18, 0xFF	; 255

00001064 <.L17>:
    1064:	42 2f       	mov	r20, r18
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	fa 01       	movw	r30, r20
    106a:	ee 0f       	add	r30, r30
    106c:	ff 1f       	adc	r31, r31
    106e:	e0 56       	subi	r30, 0x60	; 96
    1070:	fa 4f       	sbci	r31, 0xFA	; 250

00001072 <.Loc.74>:
    1072:	94 91       	lpm	r25, Z

00001074 <.LBE20>:
    1074:	89 17       	cp	r24, r25
    1076:	19 f0       	breq	.+6      	; 0x107e <.L19>

00001078 <.LBB21>:
    1078:	94 91       	lpm	r25, Z

0000107a <.LBE21>:
    107a:	91 11       	cpse	r25, r1
    107c:	f2 cf       	rjmp	.-28     	; 0x1062 <.L20>

0000107e <.L19>:
				if (pgm_read_byte(&_unshifted[i][0]) == sc) {
    107e:	e4 91       	lpm	r30, Z

00001080 <.LBE22>:
    1080:	8e 13       	cpse	r24, r30
    1082:	2d c0       	rjmp	.+90     	; 0x10de <.L10>

00001084 <.LBB23>:
					ps2_buf_push(pgm_read_byte(&_unshifted[i][1]));
    1084:	fa 01       	movw	r30, r20

00001086 <.Loc.93>:
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	ef 55       	subi	r30, 0x5F	; 95
    108c:	fa 4f       	sbci	r31, 0xFA	; 250

0000108e <.LVL22>:
    108e:	84 91       	lpm	r24, Z

00001090 <.LBE23>:
    1090:	ac cf       	rjmp	.-168    	; 0xfea <ps2_buf_push>

00001092 <.LVL24>:
    1092:	08 95       	ret

00001094 <.L22>:
				}                                       
			} else {
				for(i = 0; pgm_read_byte(&_shifted[i][0])!=sc && pgm_read_byte(&_shifted[i][0]); i++);
    1094:	9f 5f       	subi	r25, 0xFF	; 255

00001096 <.L18>:
    1096:	29 2f       	mov	r18, r25
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	f9 01       	movw	r30, r18
    109c:	ee 0f       	add	r30, r30
    109e:	ff 1f       	adc	r31, r31
    10a0:	e6 5e       	subi	r30, 0xE6	; 230
    10a2:	fa 4f       	sbci	r31, 0xFA	; 250

000010a4 <.Loc.102>:
    10a4:	44 91       	lpm	r20, Z

000010a6 <.LBE24>:
    10a6:	84 17       	cp	r24, r20
    10a8:	19 f0       	breq	.+6      	; 0x10b0 <.L21>

000010aa <.LBB25>:
    10aa:	44 91       	lpm	r20, Z

000010ac <.LBE25>:
    10ac:	41 11       	cpse	r20, r1
    10ae:	f2 cf       	rjmp	.-28     	; 0x1094 <.L22>

000010b0 <.L21>:
				if (pgm_read_byte(&_shifted[i][0]) == sc) {
    10b0:	e4 91       	lpm	r30, Z

000010b2 <.LBE26>:
    10b2:	8e 13       	cpse	r24, r30
    10b4:	14 c0       	rjmp	.+40     	; 0x10de <.L10>

000010b6 <.LBB27>:
					ps2_buf_push(pgm_read_byte(&_shifted[i][1]));
    10b6:	f9 01       	movw	r30, r18

000010b8 <.Loc.121>:
    10b8:	ee 0f       	add	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	e5 5e       	subi	r30, 0xE5	; 229
    10be:	fa 4f       	sbci	r31, 0xFA	; 250

000010c0 <.LVL34>:
    10c0:	84 91       	lpm	r24, Z

000010c2 <.LBE27>:
    10c2:	93 cf       	rjmp	.-218    	; 0xfea <ps2_buf_push>

000010c4 <.LVL36>:
    10c4:	08 95       	ret

000010c6 <.L11>:
			}
#endif /* PS2_DEBUG */
			break;
		}
	} else {
		is_up = 0; /* two 0xF0 in a row not allowed */
    10c6:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <is_up.1>

000010ca <.Loc.129>:
		switch (sc) {
    10ca:	82 31       	cpi	r24, 0x12	; 18
    10cc:	19 f0       	breq	.+6      	; 0x10d4 <.L23>
    10ce:	89 35       	cpi	r24, 0x59	; 89
    10d0:	21 f0       	breq	.+8      	; 0x10da <.L24>
    10d2:	08 95       	ret

000010d4 <.L23>:
		case 0x12 : /* left shift */
			shift = 0;
    10d4:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <shift.0>

000010d8 <.Loc.132>:
			break;
    10d8:	08 95       	ret

000010da <.L24>:
		case 0x59 : /* right shift */
			shift = 0;
    10da:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <shift.0>

000010de <.L10>:
			break;
		}
	}
}                                               
    10de:	08 95       	ret

000010e0 <ps2_read>:
	if((bitcount < 11) && (bitcount > 2)) {
    10e0:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <bitcount.3>
    10e4:	9d ef       	ldi	r25, 0xFD	; 253
    10e6:	98 0f       	add	r25, r24

000010e8 <.Loc.142>:
    10e8:	98 30       	cpi	r25, 0x08	; 8
    10ea:	50 f4       	brcc	.+20     	; 0x1100 <.L27>

000010ec <.Loc.143>:
		data = (data >> 1);      
    10ec:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <data.2>
    10f0:	96 95       	lsr	r25
    10f2:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <data.2>

000010f6 <.Loc.145>:
		if ((PS2_PIN & (1 << PS2_PIN_DATA))) /* read DATA pin */
    10f6:	b1 9b       	sbis	0x16, 1	; 22
    10f8:	03 c0       	rjmp	.+6      	; 0x1100 <.L27>

000010fa <.Loc.147>:
			data = data | 0x80; /* store '1' */
    10fa:	90 68       	ori	r25, 0x80	; 128
    10fc:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <data.2>

00001100 <.L27>:
	if (--bitcount == 0) {
    1100:	81 50       	subi	r24, 0x01	; 1

00001102 <.Loc.151>:
    1102:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <bitcount.3>
    1106:	81 11       	cpse	r24, r1

00001108 <.Loc.152>:
}
    1108:	08 95       	ret

0000110a <.Loc.153>:
		_decode(data);
    110a:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <data.2>
    110e:	8e df       	rcall	.-228    	; 0x102c <_decode>

00001110 <.LVL38>:
		bitcount = 11;
    1110:	8b e0       	ldi	r24, 0x0B	; 11
    1112:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <bitcount.3>

00001116 <.Loc.156>:
}
    1116:	08 95       	ret

00001118 <ps2_buf_pull>:
    cli();
    1118:	f8 94       	cli

0000111a <.LBE29>:
		if (_bufbeg == _bufend)
    111a:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <_bufbeg>
    111e:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <_bufend>

00001122 <.Loc.168>:
    1122:	98 17       	cp	r25, r24
    1124:	61 f0       	breq	.+24     	; 0x113e <.L35>

00001126 <.Loc.169>:
		c = _buf[_bufbeg];
    1126:	e9 2f       	mov	r30, r25
    1128:	f0 e0       	ldi	r31, 0x00	; 0

0000112a <.Loc.171>:
    112a:	eb 5d       	subi	r30, 0xDB	; 219
    112c:	fc 4f       	sbci	r31, 0xFC	; 252
    112e:	80 81       	ld	r24, Z

00001130 <.LVL41>:
		if (_bufbeg+1 == PS2_BUF_LEN)
    1130:	9f 37       	cpi	r25, 0x7F	; 127
    1132:	41 f0       	breq	.+16     	; 0x1144 <.L36>

00001134 <.Loc.174>:
			_bufbeg++;
    1134:	9f 5f       	subi	r25, 0xFF	; 255
    1136:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <_bufbeg>

0000113a <.L34>:
    sei();
    113a:	78 94       	sei

0000113c <.LBE31>:
}
    113c:	08 95       	ret

0000113e <.L35>:
    113e:	78 94       	sei

00001140 <.LBE33>:
			return 0;
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	08 95       	ret

00001144 <.L36>:
			_bufbeg = 0;
    1144:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <_bufbeg>
    1148:	f8 cf       	rjmp	.-16     	; 0x113a <.L34>

0000114a <serialTransmitInterrupt>:
        }
    }
#endif // FLOWCONTROL
}

static void serialTransmitInterrupt(uint8_t uart) {
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29

0000114e <.Loc.2>:
        serialRegisters[uart]->DATA = sendThisNext[uart];
#endif // UART_XMEGA
        sendThisNext[uart] = 0;
    } else {
#endif // FLOWCONTROL
        if (txRead[uart] != txWrite[uart]) {
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	a9 01       	movw	r20, r18
    1154:	44 0f       	add	r20, r20
    1156:	55 1f       	adc	r21, r21
    1158:	fa 01       	movw	r30, r20
    115a:	e5 55       	subi	r30, 0x55	; 85
    115c:	fc 4f       	sbci	r31, 0xFC	; 252
    115e:	60 81       	ld	r22, Z
    1160:	71 81       	ldd	r23, Z+1	; 0x01

00001162 <.Loc.4>:
    1162:	47 55       	subi	r20, 0x57	; 87
    1164:	5c 4f       	sbci	r21, 0xFC	; 252
    1166:	fa 01       	movw	r30, r20
    1168:	40 81       	ld	r20, Z
    116a:	51 81       	ldd	r21, Z+1	; 0x01

0000116c <.Loc.5>:
    116c:	64 17       	cp	r22, r20
    116e:	75 07       	cpc	r23, r21
    1170:	91 f1       	breq	.+100    	; 0x11d6 <.L2>

00001172 <.Loc.6>:
#ifndef UART_XMEGA
            *serialRegisters[uart][SERIALDATA] = txBuffer[uart][txRead[uart]];
    1172:	f9 01       	movw	r30, r18
    1174:	ee 0f       	add	r30, r30
    1176:	ff 1f       	adc	r31, r31
    1178:	df 01       	movw	r26, r30
    117a:	a5 55       	subi	r26, 0x55	; 85
    117c:	bc 4f       	sbci	r27, 0xFC	; 252
    117e:	6d 91       	ld	r22, X+
    1180:	7c 91       	ld	r23, X
    1182:	11 97       	sbiw	r26, 0x01	; 1

00001184 <.Loc.8>:
    1184:	e2 0f       	add	r30, r18
    1186:	f3 1f       	adc	r31, r19
    1188:	ee 0f       	add	r30, r30
    118a:	ff 1f       	adc	r31, r31
    118c:	ee 0f       	add	r30, r30
    118e:	ff 1f       	adc	r31, r31
    1190:	e7 59       	subi	r30, 0x97	; 151
    1192:	fd 4f       	sbci	r31, 0xFD	; 253
    1194:	c0 81       	ld	r28, Z
    1196:	d1 81       	ldd	r29, Z+1	; 0x01

00001198 <.Loc.9>:
    1198:	f0 e1       	ldi	r31, 0x10	; 16
    119a:	8f 9f       	mul	r24, r31
    119c:	c0 01       	movw	r24, r0
    119e:	11 24       	eor	r1, r1

000011a0 <.Loc.10>:
    11a0:	8f 54       	subi	r24, 0x4F	; 79
    11a2:	9c 4f       	sbci	r25, 0xFC	; 252
    11a4:	fc 01       	movw	r30, r24
    11a6:	e6 0f       	add	r30, r22
    11a8:	f7 1f       	adc	r31, r23
    11aa:	80 81       	ld	r24, Z

000011ac <.Loc.11>:
    11ac:	88 83       	st	Y, r24

000011ae <.Loc.12>:
#else // UART_XMEGA
            serialRegisters[uart]->DATA = txBuffer[uart][txRead[uart]];
#endif // UART_XMEGA
            if (txRead[uart] < (TX_BUFFER_SIZE -1)) {
    11ae:	8d 91       	ld	r24, X+
    11b0:	9c 91       	ld	r25, X
    11b2:	11 97       	sbiw	r26, 0x01	; 1

000011b4 <.Loc.14>:
    11b4:	0f 97       	sbiw	r24, 0x0f	; 15
    11b6:	38 f4       	brcc	.+14     	; 0x11c6 <.L3>

000011b8 <.Loc.15>:
                txRead[uart]++;
    11b8:	fd 01       	movw	r30, r26
    11ba:	80 81       	ld	r24, Z
    11bc:	91 81       	ldd	r25, Z+1	; 0x01

000011be <.Loc.17>:
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	91 83       	std	Z+1, r25	; 0x01
    11c2:	80 83       	st	Z, r24
    11c4:	31 c0       	rjmp	.+98     	; 0x1228 <.L1>

000011c6 <.L3>:
            } else {
                txRead[uart] = 0;
    11c6:	f9 01       	movw	r30, r18
    11c8:	ee 0f       	add	r30, r30
    11ca:	ff 1f       	adc	r31, r31
    11cc:	e5 55       	subi	r30, 0x55	; 85
    11ce:	fc 4f       	sbci	r31, 0xFC	; 252
    11d0:	11 82       	std	Z+1, r1	; 0x01
    11d2:	10 82       	st	Z, r1
    11d4:	29 c0       	rjmp	.+82     	; 0x1228 <.L1>

000011d6 <.L2>:
            }
        } else {
            shouldStartTransmission[uart] = 1;
    11d6:	f9 01       	movw	r30, r18
    11d8:	e8 55       	subi	r30, 0x58	; 88
    11da:	fc 4f       	sbci	r31, 0xFC	; 252
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	80 83       	st	Z, r24

000011e0 <.Loc.22>:

            // Disable Interrupt
#ifndef UART_XMEGA
            *serialRegisters[uart][SERIALB] &= ~(1 << serialBits[uart][SERIALUDRIE]);
    11e0:	f9 01       	movw	r30, r18
    11e2:	ee 0f       	add	r30, r30
    11e4:	ff 1f       	adc	r31, r31
    11e6:	e2 0f       	add	r30, r18
    11e8:	f3 1f       	adc	r31, r19
    11ea:	ee 0f       	add	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	ee 0f       	add	r30, r30
    11f0:	ff 1f       	adc	r31, r31
    11f2:	e7 59       	subi	r30, 0x97	; 151
    11f4:	fd 4f       	sbci	r31, 0xFD	; 253
    11f6:	a2 81       	ldd	r26, Z+2	; 0x02
    11f8:	b3 81       	ldd	r27, Z+3	; 0x03

000011fa <.Loc.24>:
    11fa:	4c 91       	ld	r20, X

000011fc <.Loc.25>:
    11fc:	f9 01       	movw	r30, r18
    11fe:	ee 0f       	add	r30, r30
    1200:	ff 1f       	adc	r31, r31
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	ee 0f       	add	r30, r30
    1208:	ff 1f       	adc	r31, r31
    120a:	e2 1b       	sub	r30, r18
    120c:	f3 0b       	sbc	r31, r19
    120e:	ee 59       	subi	r30, 0x9E	; 158
    1210:	fd 4f       	sbci	r31, 0xFD	; 253
    1212:	25 81       	ldd	r18, Z+5	; 0x05

00001214 <.Loc.26>:
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 c0       	rjmp	.+4      	; 0x121e <.L2^B1>

0000121a <.L1^B1>:
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25

0000121e <.L2^B1>:
    121e:	2a 95       	dec	r18
    1220:	e2 f7       	brpl	.-8      	; 0x121a <.L1^B1>

00001222 <.Loc.27>:
    1222:	80 95       	com	r24
    1224:	84 23       	and	r24, r20
    1226:	8c 93       	st	X, r24

00001228 <.L1>:
#endif // UART_XMEGA
        }
#ifdef FLOWCONTROL
    }
#endif // FLOWCONTROL
}
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	08 95       	ret

0000122e <serialAvailable>:
}
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	08 95       	ret

00001232 <serialInit>:
void serialInit(uint8_t uart, uint16_t baud) {
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29

0000123a <.Loc.34>:
    if (uart >= UART_COUNT) {
    123a:	81 11       	cpse	r24, r1
    123c:	70 c0       	rjmp	.+224    	; 0x131e <.L6>

0000123e <.Loc.36>:
    rxRead[uart] = 0;
    123e:	90 e0       	ldi	r25, 0x00	; 0

00001240 <.Loc.38>:
    1240:	9c 01       	movw	r18, r24
    1242:	22 0f       	add	r18, r18
    1244:	33 1f       	adc	r19, r19
    1246:	f9 01       	movw	r30, r18
    1248:	e1 55       	subi	r30, 0x51	; 81
    124a:	fc 4f       	sbci	r31, 0xFC	; 252
    124c:	11 82       	std	Z+1, r1	; 0x01
    124e:	10 82       	st	Z, r1

00001250 <.Loc.39>:
    rxWrite[uart] = 0;
    1250:	f9 01       	movw	r30, r18
    1252:	e3 55       	subi	r30, 0x53	; 83
    1254:	fc 4f       	sbci	r31, 0xFC	; 252
    1256:	11 82       	std	Z+1, r1	; 0x01
    1258:	10 82       	st	Z, r1

0000125a <.Loc.41>:
    txRead[uart] = 0;
    125a:	f9 01       	movw	r30, r18
    125c:	e5 55       	subi	r30, 0x55	; 85
    125e:	fc 4f       	sbci	r31, 0xFC	; 252
    1260:	11 82       	std	Z+1, r1	; 0x01
    1262:	10 82       	st	Z, r1

00001264 <.Loc.43>:
    txWrite[uart] = 0;
    1264:	f9 01       	movw	r30, r18
    1266:	e7 55       	subi	r30, 0x57	; 87
    1268:	fc 4f       	sbci	r31, 0xFC	; 252
    126a:	11 82       	std	Z+1, r1	; 0x01
    126c:	10 82       	st	Z, r1

0000126e <.Loc.45>:
    shouldStartTransmission[uart] = 1;
    126e:	fc 01       	movw	r30, r24
    1270:	e8 55       	subi	r30, 0x58	; 88
    1272:	fc 4f       	sbci	r31, 0xFC	; 252
    1274:	41 e0       	ldi	r20, 0x01	; 1
    1276:	40 83       	st	Z, r20

00001278 <.Loc.47>:
    *serialRegisters[uart][SERIALC] = (1 << serialBits[uart][SERIALUCSZ0])
    1278:	dc 01       	movw	r26, r24
    127a:	aa 0f       	add	r26, r26
    127c:	bb 1f       	adc	r27, r27
    127e:	aa 0f       	add	r26, r26
    1280:	bb 1f       	adc	r27, r27
    1282:	aa 0f       	add	r26, r26
    1284:	bb 1f       	adc	r27, r27
    1286:	a8 1b       	sub	r26, r24
    1288:	b9 0b       	sbc	r27, r25
    128a:	ae 59       	subi	r26, 0x9E	; 158
    128c:	bd 4f       	sbci	r27, 0xFD	; 253
    128e:	cc 91       	ld	r28, X

00001290 <.Loc.49>:
    1290:	41 e0       	ldi	r20, 0x01	; 1
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	fa 01       	movw	r30, r20
    1296:	02 c0       	rjmp	.+4      	; 0x129c <.L2^B2>

00001298 <.L1^B2>:
    1298:	ee 0f       	add	r30, r30
    129a:	ff 1f       	adc	r31, r31

0000129c <.L2^B2>:
    129c:	ca 95       	dec	r28
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <.L1^B2>
    12a0:	ef 01       	movw	r28, r30

000012a2 <.Loc.50>:
            | (1 << serialBits[uart][SERIALUCSZ1]);
    12a2:	11 96       	adiw	r26, 0x01	; 1
    12a4:	0c 91       	ld	r16, X
    12a6:	11 97       	sbiw	r26, 0x01	; 1

000012a8 <.Loc.51>:
    12a8:	fa 01       	movw	r30, r20
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <.L2^B3>

000012ac <.L1^B3>:
    12ac:	ee 0f       	add	r30, r30
    12ae:	ff 1f       	adc	r31, r31

000012b0 <.L2^B3>:
    12b0:	0a 95       	dec	r16
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <.L1^B3>
    12b4:	8f 01       	movw	r16, r30

000012b6 <.Loc.52>:
    *serialRegisters[uart][SERIALC] = (1 << serialBits[uart][SERIALUCSZ0])
    12b6:	f9 01       	movw	r30, r18
    12b8:	e8 0f       	add	r30, r24
    12ba:	f9 1f       	adc	r31, r25
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	ee 0f       	add	r30, r30
    12c2:	ff 1f       	adc	r31, r31
    12c4:	e7 59       	subi	r30, 0x97	; 151
    12c6:	fd 4f       	sbci	r31, 0xFD	; 253
    12c8:	84 81       	ldd	r24, Z+4	; 0x04
    12ca:	95 81       	ldd	r25, Z+5	; 0x05

000012cc <.Loc.53>:
            | (1 << serialBits[uart][SERIALUCSZ1]);
    12cc:	0c 2b       	or	r16, r28

000012ce <.Loc.54>:
    *serialRegisters[uart][SERIALC] = (1 << serialBits[uart][SERIALUCSZ0])
    12ce:	ec 01       	movw	r28, r24
    12d0:	08 83       	st	Y, r16

000012d2 <.Loc.55>:
    *serialRegisters[uart][SERIALUBRRH] = (baud >> 8);
    12d2:	c0 85       	ldd	r28, Z+8	; 0x08
    12d4:	d1 85       	ldd	r29, Z+9	; 0x09

000012d6 <.Loc.57>:
    12d6:	78 83       	st	Y, r23

000012d8 <.Loc.58>:
    *serialRegisters[uart][SERIALUBRRL] = baud;
    12d8:	69 b9       	out	0x09, r22	; 9

000012da <.Loc.60>:
    *serialRegisters[uart][SERIALB] = (1 << serialBits[uart][SERIALRXCIE]);
    12da:	12 96       	adiw	r26, 0x02	; 2
    12dc:	8c 91       	ld	r24, X
    12de:	12 97       	sbiw	r26, 0x02	; 2

000012e0 <.Loc.62>:
    12e0:	9a 01       	movw	r18, r20
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <.L2^B4>

000012e4 <.L1^B4>:
    12e4:	22 0f       	add	r18, r18
    12e6:	33 1f       	adc	r19, r19

000012e8 <.L2^B4>:
    12e8:	8a 95       	dec	r24
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <.L1^B4>

000012ec <.Loc.63>:
    12ec:	02 80       	ldd	r0, Z+2	; 0x02
    12ee:	f3 81       	ldd	r31, Z+3	; 0x03
    12f0:	e0 2d       	mov	r30, r0

000012f2 <.Loc.64>:
    12f2:	20 83       	st	Z, r18

000012f4 <.Loc.65>:
    *serialRegisters[uart][SERIALB] |= (1 << serialBits[uart][SERIALRXEN])
    12f4:	60 81       	ld	r22, Z

000012f6 <.Loc.66>:
    12f6:	13 96       	adiw	r26, 0x03	; 3
    12f8:	8c 91       	ld	r24, X
    12fa:	13 97       	sbiw	r26, 0x03	; 3

000012fc <.Loc.67>:
    12fc:	ea 01       	movw	r28, r20
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <.L2^B5>

00001300 <.L1^B5>:
    1300:	cc 0f       	add	r28, r28
    1302:	dd 1f       	adc	r29, r29

00001304 <.L2^B5>:
    1304:	8a 95       	dec	r24
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <.L1^B5>
    1308:	ce 01       	movw	r24, r28

0000130a <.Loc.68>:
            | (1 << serialBits[uart][SERIALTXEN]);
    130a:	14 96       	adiw	r26, 0x04	; 4
    130c:	9c 91       	ld	r25, X

0000130e <.Loc.69>:
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <.L2^B6>

00001310 <.L1^B6>:
    1310:	44 0f       	add	r20, r20
    1312:	55 1f       	adc	r21, r21

00001314 <.L2^B6>:
    1314:	9a 95       	dec	r25
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <.L1^B6>

00001318 <.Loc.70>:
    1318:	84 2b       	or	r24, r20

0000131a <.Loc.71>:
    *serialRegisters[uart][SERIALB] |= (1 << serialBits[uart][SERIALRXEN])
    131a:	86 2b       	or	r24, r22
    131c:	80 83       	st	Z, r24

0000131e <.L6>:
}
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	08 95       	ret

00001328 <serialHasChar>:
    if (uart >= UART_COUNT) {
    1328:	81 11       	cpse	r24, r1
    132a:	13 c0       	rjmp	.+38     	; 0x1352 <.L10>

0000132c <.Loc.76>:
    if (rxRead[uart] != rxWrite[uart]) {
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	22 0f       	add	r18, r18
    1332:	33 1f       	adc	r19, r19
    1334:	f9 01       	movw	r30, r18
    1336:	e1 55       	subi	r30, 0x51	; 81
    1338:	fc 4f       	sbci	r31, 0xFC	; 252
    133a:	40 81       	ld	r20, Z
    133c:	51 81       	ldd	r21, Z+1	; 0x01

0000133e <.Loc.78>:
    133e:	23 55       	subi	r18, 0x53	; 83
    1340:	3c 4f       	sbci	r19, 0xFC	; 252
    1342:	f9 01       	movw	r30, r18
    1344:	20 81       	ld	r18, Z
    1346:	31 81       	ldd	r19, Z+1	; 0x01

00001348 <.Loc.79>:
    1348:	42 17       	cp	r20, r18
    134a:	53 07       	cpc	r21, r19
    134c:	19 f0       	breq	.+6      	; 0x1354 <.L8>

0000134e <.Loc.80>:
        return 1;
    134e:	81 e0       	ldi	r24, 0x01	; 1

00001350 <.Loc.81>:
    1350:	08 95       	ret

00001352 <.L10>:
        return 0;
    1352:	80 e0       	ldi	r24, 0x00	; 0

00001354 <.L8>:
}
    1354:	08 95       	ret

00001356 <serialGet>:
    if (uart >= UART_COUNT) {
    1356:	81 11       	cpse	r24, r1
    1358:	40 c0       	rjmp	.+128    	; 0x13da <.L16>

0000135a <.Loc.87>:
    if (rxRead[uart] != rxWrite[uart]) {
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	a9 01       	movw	r20, r18
    1360:	44 0f       	add	r20, r20
    1362:	55 1f       	adc	r21, r21
    1364:	fa 01       	movw	r30, r20
    1366:	e1 55       	subi	r30, 0x51	; 81
    1368:	fc 4f       	sbci	r31, 0xFC	; 252
    136a:	60 81       	ld	r22, Z
    136c:	71 81       	ldd	r23, Z+1	; 0x01

0000136e <.Loc.90>:
    136e:	43 55       	subi	r20, 0x53	; 83
    1370:	5c 4f       	sbci	r21, 0xFC	; 252
    1372:	fa 01       	movw	r30, r20
    1374:	40 81       	ld	r20, Z
    1376:	51 81       	ldd	r21, Z+1	; 0x01

00001378 <.Loc.91>:
    1378:	64 17       	cp	r22, r20
    137a:	75 07       	cpc	r23, r21
    137c:	79 f1       	breq	.+94     	; 0x13dc <.L12>

0000137e <.Loc.92>:
        c = rxBuffer[uart][rxRead[uart]];
    137e:	f9 01       	movw	r30, r18
    1380:	ee 0f       	add	r30, r30
    1382:	ff 1f       	adc	r31, r31
    1384:	e1 55       	subi	r30, 0x51	; 81
    1386:	fc 4f       	sbci	r31, 0xFC	; 252
    1388:	a0 81       	ld	r26, Z
    138a:	b1 81       	ldd	r27, Z+1	; 0x01

0000138c <.Loc.94>:
    138c:	90 e2       	ldi	r25, 0x20	; 32
    138e:	89 9f       	mul	r24, r25
    1390:	a0 01       	movw	r20, r0
    1392:	11 24       	eor	r1, r1
    1394:	4f 53       	subi	r20, 0x3F	; 63
    1396:	5c 4f       	sbci	r21, 0xFC	; 252
    1398:	a4 0f       	add	r26, r20
    139a:	b5 1f       	adc	r27, r21
    139c:	8c 91       	ld	r24, X

0000139e <.LVL11>:
        rxBuffer[uart][rxRead[uart]] = 0;
    139e:	a0 81       	ld	r26, Z
    13a0:	b1 81       	ldd	r27, Z+1	; 0x01

000013a2 <.Loc.97>:
    13a2:	a4 0f       	add	r26, r20
    13a4:	b5 1f       	adc	r27, r21
    13a6:	1c 92       	st	X, r1

000013a8 <.Loc.98>:
        if (rxRead[uart] < (RX_BUFFER_SIZE - 1)) {
    13a8:	40 81       	ld	r20, Z
    13aa:	51 81       	ldd	r21, Z+1	; 0x01

000013ac <.Loc.100>:
    13ac:	4f 31       	cpi	r20, 0x1F	; 31
    13ae:	51 05       	cpc	r21, r1
    13b0:	60 f4       	brcc	.+24     	; 0x13ca <.L14>

000013b2 <.Loc.101>:
            rxRead[uart]++;
    13b2:	22 0f       	add	r18, r18
    13b4:	33 1f       	adc	r19, r19

000013b6 <.Loc.103>:
    13b6:	f9 01       	movw	r30, r18
    13b8:	e1 55       	subi	r30, 0x51	; 81
    13ba:	fc 4f       	sbci	r31, 0xFC	; 252
    13bc:	20 81       	ld	r18, Z
    13be:	31 81       	ldd	r19, Z+1	; 0x01

000013c0 <.Loc.104>:
    13c0:	2f 5f       	subi	r18, 0xFF	; 255
    13c2:	3f 4f       	sbci	r19, 0xFF	; 255
    13c4:	31 83       	std	Z+1, r19	; 0x01
    13c6:	20 83       	st	Z, r18
    13c8:	08 95       	ret

000013ca <.L14>:
            rxRead[uart] = 0;
    13ca:	22 0f       	add	r18, r18
    13cc:	33 1f       	adc	r19, r19

000013ce <.Loc.107>:
    13ce:	f9 01       	movw	r30, r18
    13d0:	e1 55       	subi	r30, 0x51	; 81
    13d2:	fc 4f       	sbci	r31, 0xFC	; 252
    13d4:	11 82       	std	Z+1, r1	; 0x01
    13d6:	10 82       	st	Z, r1

000013d8 <.Loc.108>:
        return c;
    13d8:	08 95       	ret

000013da <.L16>:
        return 0;
    13da:	80 e0       	ldi	r24, 0x00	; 0

000013dc <.L12>:
}
    13dc:	08 95       	ret

000013de <serialRxBufferFull>:
    if (uart >= UART_COUNT) {
    13de:	81 11       	cpse	r24, r1
    13e0:	2d c0       	rjmp	.+90     	; 0x143c <.L25>

000013e2 <.Loc.128>:
    return (((rxWrite[uart] + 1) == rxRead[uart])
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	9c 01       	movw	r18, r24
    13e6:	22 0f       	add	r18, r18
    13e8:	33 1f       	adc	r19, r19
    13ea:	f9 01       	movw	r30, r18
    13ec:	e3 55       	subi	r30, 0x53	; 83
    13ee:	fc 4f       	sbci	r31, 0xFC	; 252
    13f0:	40 81       	ld	r20, Z
    13f2:	51 81       	ldd	r21, Z+1	; 0x01

000013f4 <.Loc.130>:
    13f4:	4f 5f       	subi	r20, 0xFF	; 255
    13f6:	5f 4f       	sbci	r21, 0xFF	; 255

000013f8 <.Loc.131>:
    13f8:	21 55       	subi	r18, 0x51	; 81
    13fa:	3c 4f       	sbci	r19, 0xFC	; 252
    13fc:	f9 01       	movw	r30, r18
    13fe:	20 81       	ld	r18, Z
    1400:	31 81       	ldd	r19, Z+1	; 0x01

00001402 <.Loc.132>:
            || ((rxRead[uart] == 0) && ((rxWrite[uart] + 1) == RX_BUFFER_SIZE)));
    1402:	42 17       	cp	r20, r18
    1404:	53 07       	cpc	r21, r19
    1406:	a1 f0       	breq	.+40     	; 0x1430 <.L26>

00001408 <.Loc.133>:
    1408:	fc 01       	movw	r30, r24
    140a:	ee 0f       	add	r30, r30
    140c:	ff 1f       	adc	r31, r31
    140e:	e1 55       	subi	r30, 0x51	; 81
    1410:	fc 4f       	sbci	r31, 0xFC	; 252
    1412:	20 81       	ld	r18, Z
    1414:	31 81       	ldd	r19, Z+1	; 0x01

00001416 <.Loc.134>:
    1416:	23 2b       	or	r18, r19
    1418:	69 f4       	brne	.+26     	; 0x1434 <.L27>

0000141a <.Loc.135>:
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25

0000141e <.Loc.136>:
    141e:	fc 01       	movw	r30, r24
    1420:	e3 55       	subi	r30, 0x53	; 83
    1422:	fc 4f       	sbci	r31, 0xFC	; 252
    1424:	80 81       	ld	r24, Z
    1426:	91 81       	ldd	r25, Z+1	; 0x01

00001428 <.Loc.137>:
    1428:	4f 97       	sbiw	r24, 0x1f	; 31
    142a:	31 f0       	breq	.+12     	; 0x1438 <.L28>

0000142c <.Loc.138>:
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	08 95       	ret

00001430 <.L26>:
    1430:	81 e0       	ldi	r24, 0x01	; 1

00001432 <.Loc.140>:
    1432:	08 95       	ret

00001434 <.L27>:
    1434:	80 e0       	ldi	r24, 0x00	; 0

00001436 <.Loc.142>:
    1436:	08 95       	ret

00001438 <.L28>:
    1438:	81 e0       	ldi	r24, 0x01	; 1

0000143a <.Loc.144>:
    143a:	08 95       	ret

0000143c <.L25>:
        return 0;
    143c:	80 e0       	ldi	r24, 0x00	; 0

0000143e <.Loc.146>:
}
    143e:	08 95       	ret

00001440 <serialReceiveInterrupt>:
static void serialReceiveInterrupt(uint8_t uart) {
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29

00001444 <.Loc.149>:
    rxBuffer[uart][rxWrite[uart]] = *serialRegisters[uart][SERIALDATA];
    1444:	c8 2f       	mov	r28, r24
    1446:	d0 e0       	ldi	r29, 0x00	; 0
    1448:	9e 01       	movw	r18, r28
    144a:	22 0f       	add	r18, r18
    144c:	33 1f       	adc	r19, r19
    144e:	f9 01       	movw	r30, r18
    1450:	ec 0f       	add	r30, r28
    1452:	fd 1f       	adc	r31, r29
    1454:	ee 0f       	add	r30, r30
    1456:	ff 1f       	adc	r31, r31
    1458:	ee 0f       	add	r30, r30
    145a:	ff 1f       	adc	r31, r31
    145c:	e7 59       	subi	r30, 0x97	; 151
    145e:	fd 4f       	sbci	r31, 0xFD	; 253
    1460:	a0 81       	ld	r26, Z
    1462:	b1 81       	ldd	r27, Z+1	; 0x01

00001464 <.Loc.151>:
    1464:	23 55       	subi	r18, 0x53	; 83
    1466:	3c 4f       	sbci	r19, 0xFC	; 252
    1468:	f9 01       	movw	r30, r18
    146a:	60 81       	ld	r22, Z
    146c:	71 81       	ldd	r23, Z+1	; 0x01

0000146e <.Loc.152>:
    146e:	9c 91       	ld	r25, X

00001470 <.Loc.153>:
    1470:	f0 e2       	ldi	r31, 0x20	; 32
    1472:	8f 9f       	mul	r24, r31
    1474:	90 01       	movw	r18, r0
    1476:	11 24       	eor	r1, r1
    1478:	2f 53       	subi	r18, 0x3F	; 63
    147a:	3c 4f       	sbci	r19, 0xFC	; 252
    147c:	fb 01       	movw	r30, r22
    147e:	e2 0f       	add	r30, r18
    1480:	f3 1f       	adc	r31, r19
    1482:	90 83       	st	Z, r25

00001484 <.Loc.154>:
    if (!serialRxBufferFull(uart)) {
    1484:	ac df       	rcall	.-168    	; 0x13de <serialRxBufferFull>

00001486 <.LVL33>:
    1486:	81 11       	cpse	r24, r1
    1488:	0e c0       	rjmp	.+28     	; 0x14a6 <.L29>

0000148a <.Loc.157>:
        if (rxWrite[uart] < (RX_BUFFER_SIZE - 1)) {
    148a:	fe 01       	movw	r30, r28
    148c:	ee 0f       	add	r30, r30
    148e:	ff 1f       	adc	r31, r31
    1490:	e3 55       	subi	r30, 0x53	; 83
    1492:	fc 4f       	sbci	r31, 0xFC	; 252
    1494:	80 81       	ld	r24, Z
    1496:	91 81       	ldd	r25, Z+1	; 0x01

00001498 <.Loc.159>:
    1498:	4f 97       	sbiw	r24, 0x1f	; 31
    149a:	40 f4       	brcc	.+16     	; 0x14ac <.L31>

0000149c <.Loc.160>:
            rxWrite[uart]++;
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01

000014a0 <.Loc.162>:
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	91 83       	std	Z+1, r25	; 0x01
    14a4:	80 83       	st	Z, r24

000014a6 <.L29>:
}
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	08 95       	ret

000014ac <.L31>:
            rxWrite[uart] = 0;
    14ac:	cc 0f       	add	r28, r28
    14ae:	dd 1f       	adc	r29, r29

000014b0 <.Loc.166>:
    14b0:	c3 55       	subi	r28, 0x53	; 83
    14b2:	dc 4f       	sbci	r29, 0xFC	; 252
    14b4:	19 82       	std	Y+1, r1	; 0x01
    14b6:	18 82       	st	Y, r1

000014b8 <.Loc.167>:
}
    14b8:	f6 cf       	rjmp	.-20     	; 0x14a6 <.L29>

000014ba <serialTxBufferFull>:
    if (uart >= UART_COUNT) {
    14ba:	81 11       	cpse	r24, r1
    14bc:	2d c0       	rjmp	.+90     	; 0x1518 <.L39>

000014be <.Loc.182>:
    return (((txWrite[uart] + 1) == txRead[uart])
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	9c 01       	movw	r18, r24
    14c2:	22 0f       	add	r18, r18
    14c4:	33 1f       	adc	r19, r19
    14c6:	f9 01       	movw	r30, r18
    14c8:	e7 55       	subi	r30, 0x57	; 87
    14ca:	fc 4f       	sbci	r31, 0xFC	; 252
    14cc:	40 81       	ld	r20, Z
    14ce:	51 81       	ldd	r21, Z+1	; 0x01

000014d0 <.Loc.184>:
    14d0:	4f 5f       	subi	r20, 0xFF	; 255
    14d2:	5f 4f       	sbci	r21, 0xFF	; 255

000014d4 <.Loc.185>:
    14d4:	25 55       	subi	r18, 0x55	; 85
    14d6:	3c 4f       	sbci	r19, 0xFC	; 252
    14d8:	f9 01       	movw	r30, r18
    14da:	20 81       	ld	r18, Z
    14dc:	31 81       	ldd	r19, Z+1	; 0x01

000014de <.Loc.186>:
            || ((txRead[uart] == 0) && ((txWrite[uart] + 1) == TX_BUFFER_SIZE)));
    14de:	42 17       	cp	r20, r18
    14e0:	53 07       	cpc	r21, r19
    14e2:	a1 f0       	breq	.+40     	; 0x150c <.L40>

000014e4 <.Loc.187>:
    14e4:	fc 01       	movw	r30, r24
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	e5 55       	subi	r30, 0x55	; 85
    14ec:	fc 4f       	sbci	r31, 0xFC	; 252
    14ee:	20 81       	ld	r18, Z
    14f0:	31 81       	ldd	r19, Z+1	; 0x01

000014f2 <.Loc.188>:
    14f2:	23 2b       	or	r18, r19
    14f4:	69 f4       	brne	.+26     	; 0x1510 <.L41>

000014f6 <.Loc.189>:
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25

000014fa <.Loc.190>:
    14fa:	fc 01       	movw	r30, r24
    14fc:	e7 55       	subi	r30, 0x57	; 87
    14fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1500:	80 81       	ld	r24, Z
    1502:	91 81       	ldd	r25, Z+1	; 0x01

00001504 <.Loc.191>:
    1504:	0f 97       	sbiw	r24, 0x0f	; 15
    1506:	31 f0       	breq	.+12     	; 0x1514 <.L42>

00001508 <.Loc.192>:
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	08 95       	ret

0000150c <.L40>:
    150c:	81 e0       	ldi	r24, 0x01	; 1

0000150e <.Loc.194>:
    150e:	08 95       	ret

00001510 <.L41>:
    1510:	80 e0       	ldi	r24, 0x00	; 0

00001512 <.Loc.196>:
    1512:	08 95       	ret

00001514 <.L42>:
    1514:	81 e0       	ldi	r24, 0x01	; 1

00001516 <.Loc.198>:
    1516:	08 95       	ret

00001518 <.L39>:
        return 0;
    1518:	80 e0       	ldi	r24, 0x00	; 0

0000151a <.Loc.200>:
}
    151a:	08 95       	ret

0000151c <serialWrite>:
void serialWrite(uint8_t uart, uint8_t data) {
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	c8 2f       	mov	r28, r24
    1522:	d6 2f       	mov	r29, r22

00001524 <.Loc.203>:
    if (uart >= UART_COUNT) {
    1524:	81 11       	cpse	r24, r1
    1526:	62 c0       	rjmp	.+196    	; 0x15ec <.L43>

00001528 <.L45>:
    while (serialTxBufferFull(uart));
    1528:	8c 2f       	mov	r24, r28
    152a:	c7 df       	rcall	.-114    	; 0x14ba <serialTxBufferFull>

0000152c <.LVL51>:
    152c:	81 11       	cpse	r24, r1
    152e:	fc cf       	rjmp	.-8      	; 0x1528 <.L45>

00001530 <.Loc.206>:
    txBuffer[uart][txWrite[uart]] = data;
    1530:	2c 2f       	mov	r18, r28
    1532:	30 e0       	ldi	r19, 0x00	; 0

00001534 <.Loc.208>:
    1534:	f9 01       	movw	r30, r18
    1536:	ee 0f       	add	r30, r30
    1538:	ff 1f       	adc	r31, r31
    153a:	e7 55       	subi	r30, 0x57	; 87
    153c:	fc 4f       	sbci	r31, 0xFC	; 252
    153e:	a0 81       	ld	r26, Z
    1540:	b1 81       	ldd	r27, Z+1	; 0x01

00001542 <.Loc.209>:
    1542:	40 e1       	ldi	r20, 0x10	; 16
    1544:	c4 9f       	mul	r28, r20
    1546:	c0 01       	movw	r24, r0
    1548:	11 24       	eor	r1, r1
    154a:	8f 54       	subi	r24, 0x4F	; 79
    154c:	9c 4f       	sbci	r25, 0xFC	; 252
    154e:	a8 0f       	add	r26, r24
    1550:	b9 1f       	adc	r27, r25
    1552:	dc 93       	st	X, r29

00001554 <.Loc.210>:
    if (txWrite[uart] < (TX_BUFFER_SIZE - 1)) {
    1554:	80 81       	ld	r24, Z
    1556:	91 81       	ldd	r25, Z+1	; 0x01

00001558 <.Loc.212>:
    1558:	0f 97       	sbiw	r24, 0x0f	; 15
    155a:	08 f0       	brcs	.+2      	; 0x155e <.Loc.213>

0000155c <L0^A>:
    155c:	4a c0       	rjmp	.+148    	; 0x15f2 <.L46>

0000155e <.Loc.213>:
        txWrite[uart]++;
    155e:	f9 01       	movw	r30, r18
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	e7 55       	subi	r30, 0x57	; 87
    1566:	fc 4f       	sbci	r31, 0xFC	; 252
    1568:	80 81       	ld	r24, Z
    156a:	91 81       	ldd	r25, Z+1	; 0x01

0000156c <.Loc.215>:
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	91 83       	std	Z+1, r25	; 0x01
    1570:	80 83       	st	Z, r24

00001572 <.L47>:
    if (shouldStartTransmission[uart]) {
    1572:	f9 01       	movw	r30, r18
    1574:	e8 55       	subi	r30, 0x58	; 88
    1576:	fc 4f       	sbci	r31, 0xFC	; 252
    1578:	80 81       	ld	r24, Z

0000157a <.Loc.218>:
    157a:	81 15       	cp	r24, r1
    157c:	b9 f1       	breq	.+110    	; 0x15ec <.L43>

0000157e <.Loc.219>:
        shouldStartTransmission[uart] = 0;
    157e:	f9 01       	movw	r30, r18
    1580:	e8 55       	subi	r30, 0x58	; 88
    1582:	fc 4f       	sbci	r31, 0xFC	; 252
    1584:	10 82       	st	Z, r1

00001586 <.Loc.221>:
        *serialRegisters[uart][SERIALB] |= (1 << serialBits[uart][SERIALUDRIE]);
    1586:	c9 01       	movw	r24, r18
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	fc 01       	movw	r30, r24
    158e:	e2 0f       	add	r30, r18
    1590:	f3 1f       	adc	r31, r19
    1592:	ee 0f       	add	r30, r30
    1594:	ff 1f       	adc	r31, r31
    1596:	ee 0f       	add	r30, r30
    1598:	ff 1f       	adc	r31, r31
    159a:	e7 59       	subi	r30, 0x97	; 151
    159c:	fd 4f       	sbci	r31, 0xFD	; 253
    159e:	a2 81       	ldd	r26, Z+2	; 0x02
    15a0:	b3 81       	ldd	r27, Z+3	; 0x03

000015a2 <.Loc.223>:
    15a2:	4c 91       	ld	r20, X

000015a4 <.Loc.224>:
    15a4:	f9 01       	movw	r30, r18
    15a6:	ee 0f       	add	r30, r30
    15a8:	ff 1f       	adc	r31, r31
    15aa:	ee 0f       	add	r30, r30
    15ac:	ff 1f       	adc	r31, r31
    15ae:	ee 0f       	add	r30, r30
    15b0:	ff 1f       	adc	r31, r31
    15b2:	e2 1b       	sub	r30, r18
    15b4:	f3 0b       	sbc	r31, r19
    15b6:	ee 59       	subi	r30, 0x9E	; 158
    15b8:	fd 4f       	sbci	r31, 0xFD	; 253
    15ba:	55 81       	ldd	r21, Z+5	; 0x05

000015bc <.Loc.225>:
    15bc:	61 e0       	ldi	r22, 0x01	; 1
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <.L2^B7>

000015c2 <.L1^B7>:
    15c2:	66 0f       	add	r22, r22
    15c4:	77 1f       	adc	r23, r23

000015c6 <.L2^B7>:
    15c6:	5a 95       	dec	r21
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <.L1^B7>

000015ca <.Loc.226>:
    15ca:	46 2b       	or	r20, r22
    15cc:	4c 93       	st	X, r20

000015ce <.Loc.227>:
        *serialRegisters[uart][SERIALA] |= (1 << serialBits[uart][SERIALUDRE]);
    15ce:	fc 01       	movw	r30, r24
    15d0:	e2 0f       	add	r30, r18
    15d2:	f3 1f       	adc	r31, r19
    15d4:	ee 0f       	add	r30, r30
    15d6:	ff 1f       	adc	r31, r31
    15d8:	ee 0f       	add	r30, r30
    15da:	ff 1f       	adc	r31, r31
    15dc:	e7 59       	subi	r30, 0x97	; 151
    15de:	fd 4f       	sbci	r31, 0xFD	; 253
    15e0:	06 80       	ldd	r0, Z+6	; 0x06
    15e2:	f7 81       	ldd	r31, Z+7	; 0x07
    15e4:	e0 2d       	mov	r30, r0

000015e6 <.Loc.229>:
    15e6:	80 81       	ld	r24, Z
    15e8:	80 62       	ori	r24, 0x20	; 32

000015ea <.Loc.230>:
    15ea:	80 83       	st	Z, r24

000015ec <.L43>:
}
    15ec:	df 91       	pop	r29

000015ee <.Loc.232>:
    15ee:	cf 91       	pop	r28

000015f0 <.Loc.233>:
    15f0:	08 95       	ret

000015f2 <.L46>:
        txWrite[uart] = 0;
    15f2:	f9 01       	movw	r30, r18
    15f4:	ee 0f       	add	r30, r30
    15f6:	ff 1f       	adc	r31, r31
    15f8:	e7 55       	subi	r30, 0x57	; 87
    15fa:	fc 4f       	sbci	r31, 0xFC	; 252
    15fc:	11 82       	std	Z+1, r1	; 0x01
    15fe:	10 82       	st	Z, r1
    1600:	b8 cf       	rjmp	.-144    	; 0x1572 <.L47>

00001602 <serialWriteString>:
void serialWriteString(uint8_t uart, const char *data) {
    1602:	1f 93       	push	r17
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	18 2f       	mov	r17, r24
    160a:	c6 2f       	mov	r28, r22
    160c:	d7 2f       	mov	r29, r23

0000160e <.Loc.271>:
    if (uart >= UART_COUNT) {
    160e:	81 11       	cpse	r24, r1
    1610:	0c c0       	rjmp	.+24     	; 0x162a <.L57>

00001612 <.Loc.273>:
    if (data == 0) {
    1612:	20 97       	sbiw	r28, 0x00	; 0
    1614:	39 f4       	brne	.+14     	; 0x1624 <.L59>

00001616 <.Loc.275>:
        serialWriteString(uart, "NULL");
    1616:	64 ed       	ldi	r22, 0xD4	; 212
    1618:	72 e0       	ldi	r23, 0x02	; 2

0000161a <.Loc.276>:
    161a:	f3 df       	rcall	.-26     	; 0x1602 <serialWriteString>

0000161c <.LVL75>:
    161c:	06 c0       	rjmp	.+12     	; 0x162a <.L57>

0000161e <.L60>:
            serialWrite(uart, *data++);
    161e:	21 96       	adiw	r28, 0x01	; 1

00001620 <.Loc.280>:
    1620:	81 2f       	mov	r24, r17
    1622:	7c df       	rcall	.-264    	; 0x151c <serialWrite>

00001624 <.L59>:
        while (*data != '\0') {
    1624:	68 81       	ld	r22, Y

00001626 <.Loc.283>:
    1626:	61 11       	cpse	r22, r1
    1628:	fa cf       	rjmp	.-12     	; 0x161e <.L60>

0000162a <.L57>:
}
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17

00001630 <.Loc.285>:
    1630:	08 95       	ret

00001632 <__vector_11>:
#define ISR_TX(n) \
    ISR(SERIALTRANSMITINTERRUPT ## n) { \
        serialTransmitInterrupt(n); \
    }

ISR_RX(0)
    1632:	1f 92       	push	r1
    1634:	0f 92       	push	r0
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	0f 92       	push	r0
    163a:	11 24       	eor	r1, r1
    163c:	2f 93       	push	r18
    163e:	3f 93       	push	r19
    1640:	4f 93       	push	r20
    1642:	5f 93       	push	r21
    1644:	6f 93       	push	r22
    1646:	7f 93       	push	r23
    1648:	8f 93       	push	r24
    164a:	9f 93       	push	r25
    164c:	af 93       	push	r26
    164e:	bf 93       	push	r27
    1650:	ef 93       	push	r30
    1652:	ff 93       	push	r31

00001654 <.Loc.324>:
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	f4 de       	rcall	.-536    	; 0x1440 <serialReceiveInterrupt>

00001658 <.LVL91>:
    1658:	ff 91       	pop	r31
    165a:	ef 91       	pop	r30
    165c:	bf 91       	pop	r27
    165e:	af 91       	pop	r26
    1660:	9f 91       	pop	r25
    1662:	8f 91       	pop	r24
    1664:	7f 91       	pop	r23
    1666:	6f 91       	pop	r22
    1668:	5f 91       	pop	r21
    166a:	4f 91       	pop	r20
    166c:	3f 91       	pop	r19
    166e:	2f 91       	pop	r18
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	0f 90       	pop	r0
    1676:	1f 90       	pop	r1
    1678:	18 95       	reti

0000167a <__vector_12>:
ISR_TX(0)
    167a:	1f 92       	push	r1
    167c:	0f 92       	push	r0
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	0f 92       	push	r0
    1682:	11 24       	eor	r1, r1
    1684:	2f 93       	push	r18
    1686:	3f 93       	push	r19
    1688:	4f 93       	push	r20
    168a:	5f 93       	push	r21
    168c:	6f 93       	push	r22
    168e:	7f 93       	push	r23
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31

0000169c <.Loc.326>:
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	55 dd       	rcall	.-1366   	; 0x114a <serialTransmitInterrupt>

000016a0 <.LVL92>:
    16a0:	ff 91       	pop	r31
    16a2:	ef 91       	pop	r30
    16a4:	bf 91       	pop	r27
    16a6:	af 91       	pop	r26
    16a8:	9f 91       	pop	r25
    16aa:	8f 91       	pop	r24
    16ac:	7f 91       	pop	r23
    16ae:	6f 91       	pop	r22
    16b0:	5f 91       	pop	r21
    16b2:	4f 91       	pop	r20
    16b4:	3f 91       	pop	r19
    16b6:	2f 91       	pop	r18
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	0f 90       	pop	r0
    16be:	1f 90       	pop	r1
    16c0:	18 95       	reti

000016c2 <__udivmodhi4>:
    16c2:	aa 1b       	sub	r26, r26

000016c4 <.Loc.1>:
    16c4:	bb 1b       	sub	r27, r27

000016c6 <.Loc.2>:
    16c6:	51 e1       	ldi	r21, 0x11	; 17

000016c8 <.Loc.3>:
    16c8:	07 c0       	rjmp	.+14     	; 0x16d8 <__udivmodhi4_ep>

000016ca <__udivmodhi4_loop>:
    16ca:	aa 1f       	adc	r26, r26

000016cc <.Loc.5>:
    16cc:	bb 1f       	adc	r27, r27

000016ce <.Loc.6>:
    16ce:	a6 17       	cp	r26, r22

000016d0 <.Loc.7>:
    16d0:	b7 07       	cpc	r27, r23

000016d2 <.Loc.8>:
    16d2:	10 f0       	brcs	.+4      	; 0x16d8 <__udivmodhi4_ep>

000016d4 <.Loc.9>:
    16d4:	a6 1b       	sub	r26, r22

000016d6 <.Loc.10>:
    16d6:	b7 0b       	sbc	r27, r23

000016d8 <__udivmodhi4_ep>:
    16d8:	88 1f       	adc	r24, r24

000016da <.Loc.12>:
    16da:	99 1f       	adc	r25, r25

000016dc <.Loc.13>:
    16dc:	5a 95       	dec	r21

000016de <.Loc.14>:
    16de:	a9 f7       	brne	.-22     	; 0x16ca <__udivmodhi4_loop>

000016e0 <.Loc.15>:
    16e0:	80 95       	com	r24

000016e2 <.Loc.16>:
    16e2:	90 95       	com	r25

000016e4 <.Loc.17>:
    16e4:	bc 01       	movw	r22, r24

000016e6 <.Loc.18>:
    16e6:	cd 01       	movw	r24, r26

000016e8 <.Loc.19>:
    16e8:	08 95       	ret

000016ea <memcpy_P>:
    16ea:	fb 01       	movw	r30, r22
    16ec:	dc 01       	movw	r26, r24
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <.L_memcpy_P_start>

000016f0 <.L_memcpy_P_loop>:
    16f0:	05 90       	lpm	r0, Z+
    16f2:	0d 92       	st	X+, r0

000016f4 <.L_memcpy_P_start>:
    16f4:	41 50       	subi	r20, 0x01	; 1
    16f6:	50 40       	sbci	r21, 0x00	; 0
    16f8:	d8 f7       	brcc	.-10     	; 0x16f0 <.L_memcpy_P_loop>
    16fa:	08 95       	ret

000016fc <snprintf>:
    16fc:	ae e0       	ldi	r26, 0x0E	; 14
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e3 e8       	ldi	r30, 0x83	; 131
    1702:	fb e0       	ldi	r31, 0x0B	; 11
    1704:	a8 c2       	rjmp	.+1360   	; 0x1c56 <.Loc.14>

00001706 <.L1^B1>:
    1706:	0d 89       	ldd	r16, Y+21	; 0x15
    1708:	1e 89       	ldd	r17, Y+22	; 0x16
    170a:	86 e0       	ldi	r24, 0x06	; 6
    170c:	8c 83       	std	Y+4, r24	; 0x04
    170e:	1a 83       	std	Y+2, r17	; 0x02
    1710:	09 83       	std	Y+1, r16	; 0x01
    1712:	8f 89       	ldd	r24, Y+23	; 0x17
    1714:	98 8d       	ldd	r25, Y+24	; 0x18
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	20 e8       	ldi	r18, 0x80	; 128
    171a:	92 07       	cpc	r25, r18
    171c:	10 f0       	brcs	.+4      	; 0x1722 <.L2>
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e8       	ldi	r25, 0x80	; 128

00001722 <.L2>:
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
    1728:	ae 01       	movw	r20, r28
    172a:	45 5e       	subi	r20, 0xE5	; 229
    172c:	5f 4f       	sbci	r21, 0xFF	; 255
    172e:	69 8d       	ldd	r22, Y+25	; 0x19
    1730:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1732:	ce 01       	movw	r24, r28
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	11 d0       	rcall	.+34     	; 0x175a <vfprintf>
    1738:	4d 81       	ldd	r20, Y+5	; 0x05
    173a:	5e 81       	ldd	r21, Y+6	; 0x06
    173c:	57 fd       	sbrc	r21, 7
    173e:	0a c0       	rjmp	.+20     	; 0x1754 <.L1>
    1740:	2f 81       	ldd	r18, Y+7	; 0x07
    1742:	38 85       	ldd	r19, Y+8	; 0x08
    1744:	42 17       	cp	r20, r18
    1746:	53 07       	cpc	r21, r19
    1748:	0c f4       	brge	.+2      	; 0x174c <.L4>
    174a:	9a 01       	movw	r18, r20

0000174c <.L4>:
    174c:	02 0f       	add	r16, r18
    174e:	13 1f       	adc	r17, r19
    1750:	f8 01       	movw	r30, r16
    1752:	10 82       	st	Z, r1

00001754 <.L1>:
    1754:	2e 96       	adiw	r28, 0x0e	; 14
    1756:	e4 e0       	ldi	r30, 0x04	; 4
    1758:	9a c2       	rjmp	.+1332   	; 0x1c8e <.Loc.14>

0000175a <vfprintf>:
    175a:	ab e0       	ldi	r26, 0x0B	; 11
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e2 eb       	ldi	r30, 0xB2	; 178
    1760:	fb e0       	ldi	r31, 0x0B	; 11
    1762:	6e c2       	rjmp	.+1244   	; 0x1c40 <.Loc.3>

00001764 <.L1^B1>:
    1764:	6c 01       	movw	r12, r24
    1766:	7b 01       	movw	r14, r22
    1768:	8a 01       	movw	r16, r20
    176a:	fc 01       	movw	r30, r24
    176c:	17 82       	std	Z+7, r1	; 0x07
    176e:	16 82       	std	Z+6, r1	; 0x06
    1770:	83 81       	ldd	r24, Z+3	; 0x03
    1772:	81 ff       	sbrs	r24, 1
    1774:	bb c1       	rjmp	.+886    	; 0x1aec <.L77>
    1776:	9a e0       	ldi	r25, 0x0A	; 10
    1778:	59 2e       	mov	r5, r25

0000177a <.L3>:
    177a:	f6 01       	movw	r30, r12
    177c:	23 81       	ldd	r18, Z+3	; 0x03
    177e:	f7 01       	movw	r30, r14
    1780:	23 fd       	sbrc	r18, 3
    1782:	85 91       	lpm	r24, Z+
    1784:	23 ff       	sbrs	r18, 3
    1786:	81 91       	ld	r24, Z+
    1788:	7f 01       	movw	r14, r30
    178a:	81 15       	cp	r24, r1
    178c:	09 f4       	brne	.+2      	; 0x1790 <L0^A+0x2>

0000178e <L0^A>:
    178e:	4f c1       	rjmp	.+670    	; 0x1a2e <.L4>
    1790:	85 32       	cpi	r24, 0x25	; 37
    1792:	39 f4       	brne	.+14     	; 0x17a2 <.L5>
    1794:	23 fd       	sbrc	r18, 3
    1796:	95 91       	lpm	r25, Z+
    1798:	23 ff       	sbrs	r18, 3
    179a:	91 91       	ld	r25, Z+
    179c:	7f 01       	movw	r14, r30
    179e:	95 32       	cpi	r25, 0x25	; 37
    17a0:	21 f4       	brne	.+8      	; 0x17aa <.L78>

000017a2 <.L5>:
    17a2:	b6 01       	movw	r22, r12
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	bb d1       	rcall	.+886    	; 0x1b1e <fputc>
    17a8:	e8 cf       	rjmp	.-48     	; 0x177a <.L3>

000017aa <.L78>:
    17aa:	91 2c       	mov	r9, r1
    17ac:	61 2c       	mov	r6, r1
    17ae:	71 2c       	mov	r7, r1

000017b0 <.L6>:
    17b0:	f0 e2       	ldi	r31, 0x20	; 32
    17b2:	7f 16       	cp	r7, r31
    17b4:	40 f5       	brcc	.+80     	; 0x1806 <.L8>
    17b6:	9b 32       	cpi	r25, 0x2B	; 43
    17b8:	d9 f0       	breq	.+54     	; 0x17f0 <.L9>
    17ba:	58 f4       	brcc	.+22     	; 0x17d2 <.L10>
    17bc:	90 32       	cpi	r25, 0x20	; 32
    17be:	d1 f0       	breq	.+52     	; 0x17f4 <.L11>
    17c0:	93 32       	cpi	r25, 0x23	; 35
    17c2:	f1 f0       	breq	.+60     	; 0x1800 <.L12>

000017c4 <.L13>:
    17c4:	9e 32       	cpi	r25, 0x2E	; 46
    17c6:	99 f5       	brne	.+102    	; 0x182e <.L19>
    17c8:	76 fc       	sbrc	r7, 6
    17ca:	31 c1       	rjmp	.+610    	; 0x1a2e <.L4>
    17cc:	68 94       	set
    17ce:	76 f8       	bld	r7, 6
    17d0:	06 c0       	rjmp	.+12     	; 0x17de <.L16>

000017d2 <.L10>:
    17d2:	9d 32       	cpi	r25, 0x2D	; 45
    17d4:	91 f0       	breq	.+36     	; 0x17fa <.L14>
    17d6:	90 33       	cpi	r25, 0x30	; 48
    17d8:	c1 f4       	brne	.+48     	; 0x180a <.L15>
    17da:	68 94       	set
    17dc:	70 f8       	bld	r7, 0

000017de <.L16>:
    17de:	f7 01       	movw	r30, r14
    17e0:	23 fd       	sbrc	r18, 3
    17e2:	95 91       	lpm	r25, Z+
    17e4:	23 ff       	sbrs	r18, 3
    17e6:	91 91       	ld	r25, Z+
    17e8:	7f 01       	movw	r14, r30
    17ea:	91 11       	cpse	r25, r1
    17ec:	e1 cf       	rjmp	.-62     	; 0x17b0 <.L6>
    17ee:	26 c0       	rjmp	.+76     	; 0x183c <.L17>

000017f0 <.L9>:
    17f0:	68 94       	set
    17f2:	71 f8       	bld	r7, 1

000017f4 <.L11>:
    17f4:	68 94       	set
    17f6:	72 f8       	bld	r7, 2
    17f8:	f2 cf       	rjmp	.-28     	; 0x17de <.L16>

000017fa <.L14>:
    17fa:	68 94       	set
    17fc:	73 f8       	bld	r7, 3
    17fe:	ef cf       	rjmp	.-34     	; 0x17de <.L16>

00001800 <.L12>:
    1800:	68 94       	set
    1802:	74 f8       	bld	r7, 4
    1804:	ec cf       	rjmp	.-40     	; 0x17de <.L16>

00001806 <.L8>:
    1806:	77 fc       	sbrc	r7, 7
    1808:	19 c0       	rjmp	.+50     	; 0x183c <.L17>

0000180a <.L15>:
    180a:	80 ed       	ldi	r24, 0xD0	; 208
    180c:	89 0f       	add	r24, r25
    180e:	8a 30       	cpi	r24, 0x0A	; 10
    1810:	c8 f6       	brcc	.-78     	; 0x17c4 <.L13>
    1812:	76 fe       	sbrs	r7, 6
    1814:	05 c0       	rjmp	.+10     	; 0x1820 <.L18>
    1816:	95 9c       	mul	r9, r5
    1818:	80 0d       	add	r24, r0
    181a:	11 24       	eor	r1, r1
    181c:	98 2e       	mov	r9, r24
    181e:	df cf       	rjmp	.-66     	; 0x17de <.L16>

00001820 <.L18>:
    1820:	65 9c       	mul	r6, r5
    1822:	80 0d       	add	r24, r0
    1824:	11 24       	eor	r1, r1
    1826:	68 2e       	mov	r6, r24
    1828:	68 94       	set
    182a:	75 f8       	bld	r7, 5
    182c:	d8 cf       	rjmp	.-80     	; 0x17de <.L16>

0000182e <.L19>:
    182e:	9c 36       	cpi	r25, 0x6C	; 108
    1830:	19 f4       	brne	.+6      	; 0x1838 <.L20>
    1832:	68 94       	set
    1834:	77 f8       	bld	r7, 7
    1836:	d3 cf       	rjmp	.-90     	; 0x17de <.L16>

00001838 <.L20>:
    1838:	98 36       	cpi	r25, 0x68	; 104
    183a:	89 f2       	breq	.-94     	; 0x17de <.L16>

0000183c <.L17>:
    183c:	89 2f       	mov	r24, r25
    183e:	8f 7d       	andi	r24, 0xDF	; 223
    1840:	85 54       	subi	r24, 0x45	; 69
    1842:	83 30       	cpi	r24, 0x03	; 3
    1844:	08 f4       	brcc	.+2      	; 0x1848 <L0^A+0x2>

00001846 <L0^A>:
    1846:	84 c0       	rjmp	.+264    	; 0x1950 <.L21>
    1848:	93 36       	cpi	r25, 0x63	; 99
    184a:	09 f4       	brne	.+2      	; 0x184e <L0^A+0x2>

0000184c <L0^A>:
    184c:	9f c0       	rjmp	.+318    	; 0x198c <.L22>
    184e:	93 37       	cpi	r25, 0x73	; 115
    1850:	09 f4       	brne	.+2      	; 0x1854 <L0^A+0x2>

00001852 <L0^A>:
    1852:	a2 c0       	rjmp	.+324    	; 0x1998 <.L23>
    1854:	93 35       	cpi	r25, 0x53	; 83
    1856:	09 f4       	brne	.+2      	; 0x185a <L0^A+0x2>

00001858 <L0^A>:
    1858:	ad c0       	rjmp	.+346    	; 0x19b4 <.L24>
    185a:	94 36       	cpi	r25, 0x64	; 100
    185c:	19 f0       	breq	.+6      	; 0x1864 <.L37>
    185e:	99 36       	cpi	r25, 0x69	; 105
    1860:	09 f0       	breq	.+2      	; 0x1864 <.L37>

00001862 <L0^A>:
    1862:	d4 c0       	rjmp	.+424    	; 0x1a0c <.L38>

00001864 <.L37>:
    1864:	f8 01       	movw	r30, r16
    1866:	77 fe       	sbrs	r7, 7
    1868:	ca c0       	rjmp	.+404    	; 0x19fe <.L39>
    186a:	61 91       	ld	r22, Z+
    186c:	71 91       	ld	r23, Z+
    186e:	81 91       	ld	r24, Z+
    1870:	91 91       	ld	r25, Z+

00001872 <.L123>:
    1872:	8f 01       	movw	r16, r30
    1874:	27 2d       	mov	r18, r7
    1876:	2f 76       	andi	r18, 0x6F	; 111
    1878:	82 2e       	mov	r8, r18
    187a:	97 ff       	sbrs	r25, 7
    187c:	09 c0       	rjmp	.+18     	; 0x1890 <.L41>
    187e:	90 95       	com	r25
    1880:	80 95       	com	r24
    1882:	70 95       	com	r23
    1884:	61 95       	neg	r22
    1886:	7f 4f       	sbci	r23, 0xFF	; 255
    1888:	8f 4f       	sbci	r24, 0xFF	; 255
    188a:	9f 4f       	sbci	r25, 0xFF	; 255
    188c:	68 94       	set
    188e:	87 f8       	bld	r8, 7

00001890 <.L41>:
    1890:	2a e0       	ldi	r18, 0x0A	; 10
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	ae 01       	movw	r20, r28
    1896:	4f 5f       	subi	r20, 0xFF	; 255
    1898:	5f 4f       	sbci	r21, 0xFF	; 255
    189a:	5a 01       	movw	r10, r20
    189c:	70 d1       	rcall	.+736    	; 0x1b7e <__ultoa_invert>
    189e:	8a 19       	sub	r24, r10
    18a0:	a8 2e       	mov	r10, r24

000018a2 <.L42>:
    18a2:	ba 2c       	mov	r11, r10
    18a4:	78 2c       	mov	r7, r8
    18a6:	86 fe       	sbrs	r8, 6
    18a8:	0c c0       	rjmp	.+24     	; 0x18c2 <.L51>
    18aa:	e8 94       	clt
    18ac:	70 f8       	bld	r7, 0
    18ae:	a9 14       	cp	r10, r9
    18b0:	40 f4       	brcc	.+16     	; 0x18c2 <.L51>
    18b2:	84 fe       	sbrs	r8, 4
    18b4:	05 c0       	rjmp	.+10     	; 0x18c0 <.L87>
    18b6:	82 fc       	sbrc	r8, 2
    18b8:	03 c0       	rjmp	.+6      	; 0x18c0 <.L87>
    18ba:	f8 2d       	mov	r31, r8
    18bc:	fe 7e       	andi	r31, 0xEE	; 238
    18be:	7f 2e       	mov	r7, r31

000018c0 <.L87>:
    18c0:	b9 2c       	mov	r11, r9

000018c2 <.L51>:
    18c2:	74 fe       	sbrs	r7, 4
    18c4:	ee c0       	rjmp	.+476    	; 0x1aa2 <.L52>
    18c6:	fe 01       	movw	r30, r28
    18c8:	ea 0d       	add	r30, r10
    18ca:	f1 1d       	adc	r31, r1
    18cc:	80 81       	ld	r24, Z
    18ce:	80 33       	cpi	r24, 0x30	; 48
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <L0^A+0x2>

000018d2 <L0^A>:
    18d2:	e0 c0       	rjmp	.+448    	; 0x1a94 <.L53>
    18d4:	27 2d       	mov	r18, r7
    18d6:	29 7e       	andi	r18, 0xE9	; 233
    18d8:	72 2e       	mov	r7, r18

000018da <.L54>:
    18da:	73 fc       	sbrc	r7, 3
    18dc:	0e c0       	rjmp	.+28     	; 0x18fa <.L56>
    18de:	70 fe       	sbrs	r7, 0
    18e0:	ee c0       	rjmp	.+476    	; 0x1abe <.L88>
    18e2:	9a 2c       	mov	r9, r10
    18e4:	b6 14       	cp	r11, r6
    18e6:	18 f4       	brcc	.+6      	; 0x18ee <.L76>
    18e8:	96 0c       	add	r9, r6
    18ea:	9b 18       	sub	r9, r11
    18ec:	b6 2c       	mov	r11, r6

000018ee <.L76>:
    18ee:	86 2d       	mov	r24, r6
    18f0:	8b 19       	sub	r24, r11
    18f2:	6b 14       	cp	r6, r11
    18f4:	08 f4       	brcc	.+2      	; 0x18f8 <.L61>
    18f6:	80 e0       	ldi	r24, 0x00	; 0

000018f8 <.L61>:
    18f8:	b8 0e       	add	r11, r24

000018fa <.L56>:
    18fa:	b6 14       	cp	r11, r6
    18fc:	08 f0       	brcs	.+2      	; 0x1900 <L0^A+0x2>

000018fe <L0^A>:
    18fe:	e1 c0       	rjmp	.+450    	; 0x1ac2 <.L90>
    1900:	6b 18       	sub	r6, r11

00001902 <.L63>:
    1902:	74 fe       	sbrs	r7, 4
    1904:	e0 c0       	rjmp	.+448    	; 0x1ac6 <.L64>
    1906:	b6 01       	movw	r22, r12
    1908:	80 e3       	ldi	r24, 0x30	; 48
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	08 d1       	rcall	.+528    	; 0x1b1e <fputc>
    190e:	72 fe       	sbrs	r7, 2
    1910:	08 c0       	rjmp	.+16     	; 0x1922 <.L71>
    1912:	88 e5       	ldi	r24, 0x58	; 88
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	71 fc       	sbrc	r7, 1
    1918:	02 c0       	rjmp	.+4      	; 0x191e <.L67>
    191a:	88 e7       	ldi	r24, 0x78	; 120
    191c:	90 e0       	ldi	r25, 0x00	; 0

0000191e <.L67>:
    191e:	b6 01       	movw	r22, r12

00001920 <.L126>:
    1920:	fe d0       	rcall	.+508    	; 0x1b1e <fputc>

00001922 <.L71>:
    1922:	a9 14       	cp	r10, r9
    1924:	08 f4       	brcc	.+2      	; 0x1928 <L0^A+0x2>

00001926 <L0^A>:
    1926:	dc c0       	rjmp	.+440    	; 0x1ae0 <.L72>
    1928:	aa 94       	dec	r10
    192a:	b1 2c       	mov	r11, r1
    192c:	4f ef       	ldi	r20, 0xFF	; 255
    192e:	a4 1a       	sub	r10, r20
    1930:	b4 0a       	sbc	r11, r20
    1932:	ce 01       	movw	r24, r28
    1934:	01 96       	adiw	r24, 0x01	; 1
    1936:	4c 01       	movw	r8, r24
    1938:	a8 0e       	add	r10, r24
    193a:	b9 1e       	adc	r11, r25

0000193c <.L73>:
    193c:	f5 01       	movw	r30, r10
    193e:	82 91       	ld	r24, -Z
    1940:	5f 01       	movw	r10, r30
    1942:	b6 01       	movw	r22, r12
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	eb d0       	rcall	.+470    	; 0x1b1e <fputc>
    1948:	8a 14       	cp	r8, r10
    194a:	9b 04       	cpc	r9, r11
    194c:	b9 f7       	brne	.-18     	; 0x193c <.L73>
    194e:	15 c0       	rjmp	.+42     	; 0x197a <.L36>

00001950 <.L21>:
    1950:	0c 5f       	subi	r16, 0xFC	; 252
    1952:	1f 4f       	sbci	r17, 0xFF	; 255
    1954:	8f e3       	ldi	r24, 0x3F	; 63
    1956:	89 83       	std	Y+1, r24	; 0x01

00001958 <.L122>:
    1958:	88 24       	eor	r8, r8
    195a:	83 94       	inc	r8
    195c:	91 2c       	mov	r9, r1
    195e:	ae 01       	movw	r20, r28
    1960:	4f 5f       	subi	r20, 0xFF	; 255
    1962:	5f 4f       	sbci	r21, 0xFF	; 255
    1964:	5a 01       	movw	r10, r20

00001966 <.L26>:
    1966:	e8 94       	clt
    1968:	77 f8       	bld	r7, 7

0000196a <.L28>:
    196a:	73 fc       	sbrc	r7, 3
    196c:	03 c0       	rjmp	.+6      	; 0x1974 <.L31>

0000196e <.L30>:
    196e:	86 14       	cp	r8, r6
    1970:	91 04       	cpc	r9, r1
    1972:	80 f1       	brcs	.+96     	; 0x19d4 <.L32>

00001974 <.L31>:
    1974:	81 14       	cp	r8, r1
    1976:	91 04       	cpc	r9, r1
    1978:	99 f5       	brne	.+102    	; 0x19e0 <.L35>

0000197a <.L36>:
    197a:	61 14       	cp	r6, r1
    197c:	09 f4       	brne	.+2      	; 0x1980 <L0^A+0x2>

0000197e <L0^A>:
    197e:	fd ce       	rjmp	.-518    	; 0x177a <.L3>
    1980:	b6 01       	movw	r22, r12
    1982:	80 e2       	ldi	r24, 0x20	; 32
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	cb d0       	rcall	.+406    	; 0x1b1e <fputc>
    1988:	6a 94       	dec	r6
    198a:	f7 cf       	rjmp	.-18     	; 0x197a <.L36>

0000198c <.L22>:
    198c:	f8 01       	movw	r30, r16
    198e:	80 81       	ld	r24, Z
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	0e 5f       	subi	r16, 0xFE	; 254
    1994:	1f 4f       	sbci	r17, 0xFF	; 255
    1996:	e0 cf       	rjmp	.-64     	; 0x1958 <.L122>

00001998 <.L23>:
    1998:	f8 01       	movw	r30, r16
    199a:	a1 90       	ld	r10, Z+
    199c:	b1 90       	ld	r11, Z+
    199e:	8f 01       	movw	r16, r30
    19a0:	69 2d       	mov	r22, r9
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	76 fc       	sbrc	r7, 6
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <.L27>
    19a8:	6f ef       	ldi	r22, 0xFF	; 255
    19aa:	7f ef       	ldi	r23, 0xFF	; 255

000019ac <.L27>:
    19ac:	c5 01       	movw	r24, r10
    19ae:	ac d0       	rcall	.+344    	; 0x1b08 <strnlen>
    19b0:	4c 01       	movw	r8, r24
    19b2:	d9 cf       	rjmp	.-78     	; 0x1966 <.L26>

000019b4 <.L24>:
    19b4:	f8 01       	movw	r30, r16
    19b6:	a1 90       	ld	r10, Z+
    19b8:	b1 90       	ld	r11, Z+
    19ba:	8f 01       	movw	r16, r30
    19bc:	69 2d       	mov	r22, r9
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	76 fc       	sbrc	r7, 6
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <.L29>
    19c4:	6f ef       	ldi	r22, 0xFF	; 255
    19c6:	7f ef       	ldi	r23, 0xFF	; 255

000019c8 <.L29>:
    19c8:	c5 01       	movw	r24, r10
    19ca:	93 d0       	rcall	.+294    	; 0x1af2 <strnlen_P>
    19cc:	4c 01       	movw	r8, r24
    19ce:	68 94       	set
    19d0:	77 f8       	bld	r7, 7
    19d2:	cb cf       	rjmp	.-106    	; 0x196a <.L28>

000019d4 <.L32>:
    19d4:	b6 01       	movw	r22, r12
    19d6:	80 e2       	ldi	r24, 0x20	; 32
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a1 d0       	rcall	.+322    	; 0x1b1e <fputc>
    19dc:	6a 94       	dec	r6
    19de:	c7 cf       	rjmp	.-114    	; 0x196e <.L30>

000019e0 <.L35>:
    19e0:	f5 01       	movw	r30, r10
    19e2:	77 fc       	sbrc	r7, 7
    19e4:	85 91       	lpm	r24, Z+
    19e6:	77 fe       	sbrs	r7, 7
    19e8:	81 91       	ld	r24, Z+
    19ea:	5f 01       	movw	r10, r30
    19ec:	b6 01       	movw	r22, r12
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	96 d0       	rcall	.+300    	; 0x1b1e <fputc>
    19f2:	61 10       	cpse	r6, r1
    19f4:	6a 94       	dec	r6
    19f6:	f1 e0       	ldi	r31, 0x01	; 1
    19f8:	8f 1a       	sub	r8, r31
    19fa:	91 08       	sbc	r9, r1
    19fc:	bb cf       	rjmp	.-138    	; 0x1974 <.L31>

000019fe <.L39>:
    19fe:	61 91       	ld	r22, Z+
    1a00:	71 91       	ld	r23, Z+
    1a02:	07 2e       	mov	r0, r23
    1a04:	00 0c       	add	r0, r0
    1a06:	88 0b       	sbc	r24, r24
    1a08:	99 0b       	sbc	r25, r25
    1a0a:	33 cf       	rjmp	.-410    	; 0x1872 <.L123>

00001a0c <.L38>:
    1a0c:	87 2c       	mov	r8, r7
    1a0e:	e8 94       	clt
    1a10:	84 f8       	bld	r8, 4
    1a12:	2a e0       	ldi	r18, 0x0A	; 10
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	95 37       	cpi	r25, 0x75	; 117
    1a18:	31 f1       	breq	.+76     	; 0x1a66 <.L44>
    1a1a:	57 2d       	mov	r21, r7
    1a1c:	59 7f       	andi	r21, 0xF9	; 249
    1a1e:	85 2e       	mov	r8, r21
    1a20:	90 37       	cpi	r25, 0x70	; 112
    1a22:	a1 f0       	breq	.+40     	; 0x1a4c <.L45>
    1a24:	50 f4       	brcc	.+20     	; 0x1a3a <.L46>
    1a26:	98 35       	cpi	r25, 0x58	; 88
    1a28:	a1 f0       	breq	.+40     	; 0x1a52 <.L47>
    1a2a:	9f 36       	cpi	r25, 0x6F	; 111
    1a2c:	d1 f0       	breq	.+52     	; 0x1a62 <.L81>

00001a2e <.L4>:
    1a2e:	f6 01       	movw	r30, r12
    1a30:	86 81       	ldd	r24, Z+6	; 0x06
    1a32:	97 81       	ldd	r25, Z+7	; 0x07

00001a34 <.L1>:
    1a34:	2b 96       	adiw	r28, 0x0b	; 11
    1a36:	ef e0       	ldi	r30, 0x0F	; 15
    1a38:	1f c1       	rjmp	.+574    	; 0x1c78 <.Loc.3>

00001a3a <.L46>:
    1a3a:	98 37       	cpi	r25, 0x78	; 120
    1a3c:	c1 f7       	brne	.-16     	; 0x1a2e <.L4>

00001a3e <.L48>:
    1a3e:	84 fe       	sbrs	r8, 4
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <.L82>
    1a42:	68 94       	set
    1a44:	82 f8       	bld	r8, 2

00001a46 <.L82>:
    1a46:	20 e1       	ldi	r18, 0x10	; 16
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	0d c0       	rjmp	.+26     	; 0x1a66 <.L44>

00001a4c <.L45>:
    1a4c:	68 94       	set
    1a4e:	84 f8       	bld	r8, 4
    1a50:	f6 cf       	rjmp	.-20     	; 0x1a3e <.L48>

00001a52 <.L47>:
    1a52:	74 fe       	sbrs	r7, 4
    1a54:	03 c0       	rjmp	.+6      	; 0x1a5c <.L83>
    1a56:	85 2f       	mov	r24, r21
    1a58:	86 60       	ori	r24, 0x06	; 6
    1a5a:	88 2e       	mov	r8, r24

00001a5c <.L83>:
    1a5c:	20 e1       	ldi	r18, 0x10	; 16
    1a5e:	32 e0       	ldi	r19, 0x02	; 2
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <.L44>

00001a62 <.L81>:
    1a62:	28 e0       	ldi	r18, 0x08	; 8
    1a64:	30 e0       	ldi	r19, 0x00	; 0

00001a66 <.L44>:
    1a66:	f8 01       	movw	r30, r16
    1a68:	87 fe       	sbrs	r8, 7
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <.L49>
    1a6c:	61 91       	ld	r22, Z+
    1a6e:	71 91       	ld	r23, Z+
    1a70:	81 91       	ld	r24, Z+
    1a72:	91 91       	ld	r25, Z+

00001a74 <.L124>:
    1a74:	8f 01       	movw	r16, r30
    1a76:	fe 01       	movw	r30, r28
    1a78:	31 96       	adiw	r30, 0x01	; 1
    1a7a:	5f 01       	movw	r10, r30
    1a7c:	af 01       	movw	r20, r30
    1a7e:	7f d0       	rcall	.+254    	; 0x1b7e <__ultoa_invert>
    1a80:	8a 19       	sub	r24, r10
    1a82:	a8 2e       	mov	r10, r24
    1a84:	e8 94       	clt
    1a86:	87 f8       	bld	r8, 7
    1a88:	0c cf       	rjmp	.-488    	; 0x18a2 <.L42>

00001a8a <.L49>:
    1a8a:	61 91       	ld	r22, Z+
    1a8c:	71 91       	ld	r23, Z+
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	f0 cf       	rjmp	.-32     	; 0x1a74 <.L124>

00001a94 <.L53>:
    1a94:	72 fc       	sbrc	r7, 2
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <.L55>

00001a98 <.L125>:
    1a98:	b3 94       	inc	r11
    1a9a:	1f cf       	rjmp	.-450    	; 0x18da <.L54>

00001a9c <.L55>:
    1a9c:	b3 94       	inc	r11
    1a9e:	b3 94       	inc	r11
    1aa0:	1c cf       	rjmp	.-456    	; 0x18da <.L54>

00001aa2 <.L52>:
    1aa2:	87 2d       	mov	r24, r7
    1aa4:	86 78       	andi	r24, 0x86	; 134
    1aa6:	81 15       	cp	r24, r1
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <L0^A+0x2>

00001aaa <L0^A>:
    1aaa:	17 cf       	rjmp	.-466    	; 0x18da <.L54>
    1aac:	f5 cf       	rjmp	.-22     	; 0x1a98 <.L125>

00001aae <.L59>:
    1aae:	b6 01       	movw	r22, r12
    1ab0:	80 e2       	ldi	r24, 0x20	; 32
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	34 d0       	rcall	.+104    	; 0x1b1e <fputc>
    1ab6:	83 94       	inc	r8

00001ab8 <.L57>:
    1ab8:	86 14       	cp	r8, r6
    1aba:	c8 f3       	brcs	.-14     	; 0x1aae <.L59>
    1abc:	18 cf       	rjmp	.-464    	; 0x18ee <.L76>

00001abe <.L88>:
    1abe:	8b 2c       	mov	r8, r11
    1ac0:	fb cf       	rjmp	.-10     	; 0x1ab8 <.L57>

00001ac2 <.L90>:
    1ac2:	61 2c       	mov	r6, r1
    1ac4:	1e cf       	rjmp	.-452    	; 0x1902 <.L63>

00001ac6 <.L64>:
    1ac6:	87 2d       	mov	r24, r7
    1ac8:	86 78       	andi	r24, 0x86	; 134
    1aca:	81 15       	cp	r24, r1
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <L0^A+0x2>

00001ace <L0^A>:
    1ace:	29 cf       	rjmp	.-430    	; 0x1922 <.L71>
    1ad0:	80 e2       	ldi	r24, 0x20	; 32
    1ad2:	71 fc       	sbrc	r7, 1
    1ad4:	8b e2       	ldi	r24, 0x2B	; 43
    1ad6:	77 fc       	sbrc	r7, 7
    1ad8:	8d e2       	ldi	r24, 0x2D	; 45
    1ada:	b6 01       	movw	r22, r12
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	20 cf       	rjmp	.-448    	; 0x1920 <.L126>

00001ae0 <.L72>:
    1ae0:	b6 01       	movw	r22, r12
    1ae2:	80 e3       	ldi	r24, 0x30	; 48
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	1b d0       	rcall	.+54     	; 0x1b1e <fputc>
    1ae8:	9a 94       	dec	r9
    1aea:	1b cf       	rjmp	.-458    	; 0x1922 <.L71>

00001aec <.L77>:
    1aec:	8f ef       	ldi	r24, 0xFF	; 255
    1aee:	9f ef       	ldi	r25, 0xFF	; 255
    1af0:	a1 cf       	rjmp	.-190    	; 0x1a34 <.L1>

00001af2 <strnlen_P>:
    1af2:	fc 01       	movw	r30, r24

00001af4 <.L_strnlen_P_loop>:
    1af4:	05 90       	lpm	r0, Z+
    1af6:	61 50       	subi	r22, 0x01	; 1
    1af8:	70 40       	sbci	r23, 0x00	; 0
    1afa:	01 10       	cpse	r0, r1
    1afc:	d8 f7       	brcc	.-10     	; 0x1af4 <.L_strnlen_P_loop>
    1afe:	80 95       	com	r24
    1b00:	90 95       	com	r25
    1b02:	8e 0f       	add	r24, r30
    1b04:	9f 1f       	adc	r25, r31
    1b06:	08 95       	ret

00001b08 <strnlen>:
    1b08:	fc 01       	movw	r30, r24

00001b0a <.L_strnlen_loop>:
    1b0a:	61 50       	subi	r22, 0x01	; 1
    1b0c:	70 40       	sbci	r23, 0x00	; 0
    1b0e:	01 90       	ld	r0, Z+
    1b10:	01 10       	cpse	r0, r1
    1b12:	d8 f7       	brcc	.-10     	; 0x1b0a <.L_strnlen_loop>
    1b14:	80 95       	com	r24
    1b16:	90 95       	com	r25
    1b18:	8e 0f       	add	r24, r30
    1b1a:	9f 1f       	adc	r25, r31
    1b1c:	08 95       	ret

00001b1e <fputc>:
    1b1e:	0f 93       	push	r16
    1b20:	1f 93       	push	r17
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	18 2f       	mov	r17, r24
    1b28:	09 2f       	mov	r16, r25
    1b2a:	eb 01       	movw	r28, r22
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	81 fd       	sbrc	r24, 1
    1b30:	09 c0       	rjmp	.+18     	; 0x1b44 <.L2>

00001b32 <.L7>:
    1b32:	1f ef       	ldi	r17, 0xFF	; 255
    1b34:	0f ef       	ldi	r16, 0xFF	; 255

00001b36 <.L3>:
    1b36:	81 2f       	mov	r24, r17
    1b38:	90 2f       	mov	r25, r16
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	08 95       	ret

00001b44 <.L2>:
    1b44:	82 ff       	sbrs	r24, 2
    1b46:	14 c0       	rjmp	.+40     	; 0x1b70 <.L4>
    1b48:	2e 81       	ldd	r18, Y+6	; 0x06
    1b4a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b50:	28 17       	cp	r18, r24
    1b52:	39 07       	cpc	r19, r25
    1b54:	3c f4       	brge	.+14     	; 0x1b64 <.L8>
    1b56:	e8 81       	ld	r30, Y
    1b58:	f9 81       	ldd	r31, Y+1	; 0x01
    1b5a:	cf 01       	movw	r24, r30
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	99 83       	std	Y+1, r25	; 0x01
    1b60:	88 83       	st	Y, r24
    1b62:	10 83       	st	Z, r17

00001b64 <.L8>:
    1b64:	8e 81       	ldd	r24, Y+6	; 0x06
    1b66:	9f 81       	ldd	r25, Y+7	; 0x07
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	9f 83       	std	Y+7, r25	; 0x07
    1b6c:	8e 83       	std	Y+6, r24	; 0x06
    1b6e:	e3 cf       	rjmp	.-58     	; 0x1b36 <.L3>

00001b70 <.L4>:
    1b70:	e8 85       	ldd	r30, Y+8	; 0x08
    1b72:	f9 85       	ldd	r31, Y+9	; 0x09
    1b74:	81 2f       	mov	r24, r17
    1b76:	09 95       	icall
    1b78:	89 2b       	or	r24, r25
    1b7a:	a1 f3       	breq	.-24     	; 0x1b64 <.L8>
    1b7c:	da cf       	rjmp	.-76     	; 0x1b32 <.L7>

00001b7e <__ultoa_invert>:
    1b7e:	fa 01       	movw	r30, r20
    1b80:	aa 27       	eor	r26, r26
    1b82:	28 30       	cpi	r18, 0x08	; 8
    1b84:	51 f1       	breq	.+84     	; 0x1bda <.L_oct>
    1b86:	20 31       	cpi	r18, 0x10	; 16
    1b88:	81 f1       	breq	.+96     	; 0x1bea <.L_hex>
    1b8a:	e8 94       	clt

00001b8c <.L_dec_loop>:
    1b8c:	6f 93       	push	r22
    1b8e:	6e 7f       	andi	r22, 0xFE	; 254
    1b90:	6e 5f       	subi	r22, 0xFE	; 254
    1b92:	7f 4f       	sbci	r23, 0xFF	; 255
    1b94:	8f 4f       	sbci	r24, 0xFF	; 255
    1b96:	9f 4f       	sbci	r25, 0xFF	; 255
    1b98:	af 4f       	sbci	r26, 0xFF	; 255
    1b9a:	b1 e0       	ldi	r27, 0x01	; 1
    1b9c:	3e d0       	rcall	.+124    	; 0x1c1a <.L_div_add>
    1b9e:	b4 e0       	ldi	r27, 0x04	; 4
    1ba0:	3c d0       	rcall	.+120    	; 0x1c1a <.L_div_add>
    1ba2:	67 0f       	add	r22, r23
    1ba4:	78 1f       	adc	r23, r24
    1ba6:	89 1f       	adc	r24, r25
    1ba8:	9a 1f       	adc	r25, r26
    1baa:	a1 1d       	adc	r26, r1
    1bac:	68 0f       	add	r22, r24
    1bae:	79 1f       	adc	r23, r25
    1bb0:	8a 1f       	adc	r24, r26
    1bb2:	91 1d       	adc	r25, r1
    1bb4:	a1 1d       	adc	r26, r1
    1bb6:	6a 0f       	add	r22, r26
    1bb8:	71 1d       	adc	r23, r1
    1bba:	81 1d       	adc	r24, r1
    1bbc:	91 1d       	adc	r25, r1
    1bbe:	a1 1d       	adc	r26, r1
    1bc0:	20 d0       	rcall	.+64     	; 0x1c02 <.L_lsr_4>
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <.L1^B1>
    1bc4:	68 94       	set

00001bc6 <.L1^B1>:
    1bc6:	3f 91       	pop	r19
    1bc8:	2a e0       	ldi	r18, 0x0A	; 10
    1bca:	26 9f       	mul	r18, r22
    1bcc:	11 24       	eor	r1, r1
    1bce:	30 19       	sub	r19, r0
    1bd0:	30 5d       	subi	r19, 0xD0	; 208
    1bd2:	31 93       	st	Z+, r19
    1bd4:	de f6       	brtc	.-74     	; 0x1b8c <.L_dec_loop>

00001bd6 <.L_eos>:
    1bd6:	cf 01       	movw	r24, r30
    1bd8:	08 95       	ret

00001bda <.L_oct>:
    1bda:	46 2f       	mov	r20, r22
    1bdc:	47 70       	andi	r20, 0x07	; 7
    1bde:	40 5d       	subi	r20, 0xD0	; 208
    1be0:	41 93       	st	Z+, r20
    1be2:	b3 e0       	ldi	r27, 0x03	; 3
    1be4:	0f d0       	rcall	.+30     	; 0x1c04 <.L_lsr>
    1be6:	c9 f7       	brne	.-14     	; 0x1bda <.L_oct>
    1be8:	f6 cf       	rjmp	.-20     	; 0x1bd6 <.L_eos>

00001bea <.L_hex>:
    1bea:	46 2f       	mov	r20, r22
    1bec:	4f 70       	andi	r20, 0x0F	; 15
    1bee:	40 5d       	subi	r20, 0xD0	; 208
    1bf0:	4a 33       	cpi	r20, 0x3A	; 58
    1bf2:	18 f0       	brcs	.+6      	; 0x1bfa <.L3^B1>
    1bf4:	49 5d       	subi	r20, 0xD9	; 217
    1bf6:	31 fd       	sbrc	r19, 1
    1bf8:	40 52       	subi	r20, 0x20	; 32

00001bfa <.L3^B1>:
    1bfa:	41 93       	st	Z+, r20
    1bfc:	02 d0       	rcall	.+4      	; 0x1c02 <.L_lsr_4>
    1bfe:	a9 f7       	brne	.-22     	; 0x1bea <.L_hex>
    1c00:	ea cf       	rjmp	.-44     	; 0x1bd6 <.L_eos>

00001c02 <.L_lsr_4>:
    1c02:	b4 e0       	ldi	r27, 0x04	; 4

00001c04 <.L_lsr>:
    1c04:	a6 95       	lsr	r26
    1c06:	97 95       	ror	r25
    1c08:	87 95       	ror	r24
    1c0a:	77 95       	ror	r23
    1c0c:	67 95       	ror	r22
    1c0e:	ba 95       	dec	r27
    1c10:	c9 f7       	brne	.-14     	; 0x1c04 <.L_lsr>
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	61 05       	cpc	r22, r1
    1c16:	71 05       	cpc	r23, r1
    1c18:	08 95       	ret

00001c1a <.L_div_add>:
    1c1a:	9b 01       	movw	r18, r22
    1c1c:	ac 01       	movw	r20, r24
    1c1e:	0a 2e       	mov	r0, r26

00001c20 <.L7^B1>:
    1c20:	06 94       	lsr	r0
    1c22:	57 95       	ror	r21
    1c24:	47 95       	ror	r20
    1c26:	37 95       	ror	r19
    1c28:	27 95       	ror	r18
    1c2a:	ba 95       	dec	r27
    1c2c:	c9 f7       	brne	.-14     	; 0x1c20 <.L7^B1>
    1c2e:	62 0f       	add	r22, r18
    1c30:	73 1f       	adc	r23, r19
    1c32:	84 1f       	adc	r24, r20
    1c34:	95 1f       	adc	r25, r21
    1c36:	a0 1d       	adc	r26, r0
    1c38:	08 95       	ret

00001c3a <__prologue_saves__>:
    1c3a:	2f 92       	push	r2

00001c3c <.Loc.1>:
    1c3c:	3f 92       	push	r3

00001c3e <.Loc.2>:
    1c3e:	4f 92       	push	r4

00001c40 <.Loc.3>:
    1c40:	5f 92       	push	r5

00001c42 <.Loc.4>:
    1c42:	6f 92       	push	r6

00001c44 <.Loc.5>:
    1c44:	7f 92       	push	r7

00001c46 <.Loc.6>:
    1c46:	8f 92       	push	r8

00001c48 <.Loc.7>:
    1c48:	9f 92       	push	r9

00001c4a <.Loc.8>:
    1c4a:	af 92       	push	r10

00001c4c <.Loc.9>:
    1c4c:	bf 92       	push	r11

00001c4e <.Loc.10>:
    1c4e:	cf 92       	push	r12

00001c50 <.Loc.11>:
    1c50:	df 92       	push	r13

00001c52 <.Loc.12>:
    1c52:	ef 92       	push	r14

00001c54 <.Loc.13>:
    1c54:	ff 92       	push	r15

00001c56 <.Loc.14>:
    1c56:	0f 93       	push	r16

00001c58 <.Loc.15>:
    1c58:	1f 93       	push	r17

00001c5a <.Loc.16>:
    1c5a:	cf 93       	push	r28

00001c5c <.Loc.17>:
    1c5c:	df 93       	push	r29

00001c5e <.Loc.18>:
    1c5e:	cd b7       	in	r28, 0x3d	; 61

00001c60 <.Loc.19>:
    1c60:	de b7       	in	r29, 0x3e	; 62

00001c62 <.Loc.20>:
    1c62:	ca 1b       	sub	r28, r26

00001c64 <.Loc.21>:
    1c64:	db 0b       	sbc	r29, r27

00001c66 <.Loc.22>:
    1c66:	0f b6       	in	r0, 0x3f	; 63

00001c68 <.Loc.23>:
    1c68:	f8 94       	cli

00001c6a <.Loc.24>:
    1c6a:	de bf       	out	0x3e, r29	; 62

00001c6c <.Loc.25>:
    1c6c:	0f be       	out	0x3f, r0	; 63

00001c6e <.Loc.26>:
    1c6e:	cd bf       	out	0x3d, r28	; 61

00001c70 <.Loc.27>:
    1c70:	09 94       	ijmp

00001c72 <__epilogue_restores__>:
    1c72:	2a 88       	ldd	r2, Y+18	; 0x12

00001c74 <.Loc.1>:
    1c74:	39 88       	ldd	r3, Y+17	; 0x11

00001c76 <.Loc.2>:
    1c76:	48 88       	ldd	r4, Y+16	; 0x10

00001c78 <.Loc.3>:
    1c78:	5f 84       	ldd	r5, Y+15	; 0x0f

00001c7a <.Loc.4>:
    1c7a:	6e 84       	ldd	r6, Y+14	; 0x0e

00001c7c <.Loc.5>:
    1c7c:	7d 84       	ldd	r7, Y+13	; 0x0d

00001c7e <.Loc.6>:
    1c7e:	8c 84       	ldd	r8, Y+12	; 0x0c

00001c80 <.Loc.7>:
    1c80:	9b 84       	ldd	r9, Y+11	; 0x0b

00001c82 <.Loc.8>:
    1c82:	aa 84       	ldd	r10, Y+10	; 0x0a

00001c84 <.Loc.9>:
    1c84:	b9 84       	ldd	r11, Y+9	; 0x09

00001c86 <.Loc.10>:
    1c86:	c8 84       	ldd	r12, Y+8	; 0x08

00001c88 <.Loc.11>:
    1c88:	df 80       	ldd	r13, Y+7	; 0x07

00001c8a <.Loc.12>:
    1c8a:	ee 80       	ldd	r14, Y+6	; 0x06

00001c8c <.Loc.13>:
    1c8c:	fd 80       	ldd	r15, Y+5	; 0x05

00001c8e <.Loc.14>:
    1c8e:	0c 81       	ldd	r16, Y+4	; 0x04

00001c90 <.Loc.15>:
    1c90:	1b 81       	ldd	r17, Y+3	; 0x03

00001c92 <.Loc.16>:
    1c92:	aa 81       	ldd	r26, Y+2	; 0x02

00001c94 <.Loc.17>:
    1c94:	b9 81       	ldd	r27, Y+1	; 0x01

00001c96 <.Loc.18>:
    1c96:	ce 0f       	add	r28, r30

00001c98 <.Loc.19>:
    1c98:	d1 1d       	adc	r29, r1

00001c9a <.Loc.20>:
    1c9a:	0f b6       	in	r0, 0x3f	; 63

00001c9c <.Loc.21>:
    1c9c:	f8 94       	cli

00001c9e <.Loc.22>:
    1c9e:	de bf       	out	0x3e, r29	; 62

00001ca0 <.Loc.23>:
    1ca0:	0f be       	out	0x3f, r0	; 63

00001ca2 <.Loc.24>:
    1ca2:	cd bf       	out	0x3d, r28	; 61

00001ca4 <.Loc.25>:
    1ca4:	ed 01       	movw	r28, r26

00001ca6 <.Loc.26>:
    1ca6:	08 95       	ret

00001ca8 <_exit>:
    1ca8:	f8 94       	cli

00001caa <__stop_program>:
    1caa:	ff cf       	rjmp	.-2      	; 0x1caa <__stop_program>
